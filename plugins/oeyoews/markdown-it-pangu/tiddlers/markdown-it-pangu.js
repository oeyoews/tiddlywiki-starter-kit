'use strict';
function getDefaultExportFromCjs(i) {
  return i && i.__esModule && Object.prototype.hasOwnProperty.call(i, 'default')
    ? i.default
    : i;
}
function getAugmentedNamespace(i) {
  if (i.__esModule) return i;
  var q = i.default;
  if (typeof q == 'function') {
    var p = function a() {
      return this instanceof a
        ? Reflect.construct(q, arguments, this.constructor)
        : q.apply(this, arguments);
    };
    p.prototype = q.prototype;
  } else p = {};
  return (
    Object.defineProperty(p, '__esModule', { value: !0 }),
    Object.keys(i).forEach(function (a) {
      var s = Object.getOwnPropertyDescriptor(i, a);
      Object.defineProperty(
        p,
        a,
        s.get
          ? s
          : {
              enumerable: !0,
              get: function () {
                return i[a];
              }
            }
      );
    }),
    p
  );
}
var pangu_min = { exports: {} };
/*!
 * pangu.js
 * --------
 * @version: 4.0.7
 * @homepage: https://github.com/vinta/pangu.js
 * @license: MIT
 * @author: Vinta Chen <vinta.chen@gmail.com> (https://github.com/vinta)
 */ (function (i, q) {
  (function (p, a) {
    i.exports = a();
  })(window, function () {
    return (function (p) {
      var a = {};
      function s(n) {
        if (a[n]) return a[n].exports;
        var o = (a[n] = { i: n, l: !1, exports: {} });
        return p[n].call(o.exports, o, o.exports, s), (o.l = !0), o.exports;
      }
      return (
        (s.m = p),
        (s.c = a),
        (s.d = function (n, o, u) {
          s.o(n, o) || Object.defineProperty(n, o, { enumerable: !0, get: u });
        }),
        (s.r = function (n) {
          typeof Symbol < 'u' &&
            Symbol.toStringTag &&
            Object.defineProperty(n, Symbol.toStringTag, { value: 'Module' }),
            Object.defineProperty(n, '__esModule', { value: !0 });
        }),
        (s.t = function (n, o) {
          if (
            (1 & o && (n = s(n)),
            8 & o || (4 & o && typeof n == 'object' && n && n.__esModule))
          )
            return n;
          var u = Object.create(null);
          if (
            (s.r(u),
            Object.defineProperty(u, 'default', { enumerable: !0, value: n }),
            2 & o && typeof n != 'string')
          )
            for (var m in n)
              s.d(
                u,
                m,
                function (y) {
                  return n[y];
                }.bind(null, m)
              );
          return u;
        }),
        (s.n = function (n) {
          var o =
            n && n.__esModule
              ? function () {
                  return n.default;
                }
              : function () {
                  return n;
                };
          return s.d(o, 'a', o), o;
        }),
        (s.o = function (n, o) {
          return Object.prototype.hasOwnProperty.call(n, o);
        }),
        (s.p = ''),
        s((s.s = 0))
      );
    })([
      function (p, a, s) {
        var n, o, u;
        (o = []),
          (u =
            typeof (n = function () {
              function m(v) {
                return (m =
                  typeof Symbol == 'function' &&
                  typeof Symbol.iterator == 'symbol'
                    ? function (g) {
                        return typeof g;
                      }
                    : function (g) {
                        return g &&
                          typeof Symbol == 'function' &&
                          g.constructor === Symbol &&
                          g !== Symbol.prototype
                          ? 'symbol'
                          : typeof g;
                      })(v);
              }
              function y(v, g) {
                for (var h = 0; h < g.length; h++) {
                  var T = g[h];
                  (T.enumerable = T.enumerable || !1),
                    (T.configurable = !0),
                    'value' in T && (T.writable = !0),
                    Object.defineProperty(v, T.key, T);
                }
              }
              function e(v, g) {
                return !g || (m(g) !== 'object' && typeof g != 'function')
                  ? (function (h) {
                      if (h === void 0)
                        throw new ReferenceError(
                          "this hasn't been initialised - super() hasn't been called"
                        );
                      return h;
                    })(v)
                  : g;
              }
              function S(v) {
                return (S = Object.setPrototypeOf
                  ? Object.getPrototypeOf
                  : function (g) {
                      return g.__proto__ || Object.getPrototypeOf(g);
                    })(v);
              }
              function O(v, g) {
                return (O =
                  Object.setPrototypeOf ||
                  function (h, T) {
                    return (h.__proto__ = T), h;
                  })(v, g);
              }
              var x = (function (v) {
                  function g() {
                    var c;
                    return (
                      (function (l, r) {
                        if (!(l instanceof r))
                          throw new TypeError(
                            'Cannot call a class as a function'
                          );
                      })(this, g),
                      ((c = e(this, S(g).call(this))).blockTags =
                        /^(div|p|h1|h2|h3|h4|h5|h6)$/i),
                      (c.ignoredTags = /^(script|code|pre|textarea)$/i),
                      (c.presentationalTags = /^(b|code|del|em|i|s|strong)$/i),
                      (c.spaceLikeTags = /^(br|hr|i|img|pangu)$/i),
                      (c.spaceSensitiveTags = /^(a|del|pre|s|strike|u)$/i),
                      (c.isAutoSpacingPageExecuted = !1),
                      c
                    );
                  }
                  return (
                    (function (c, l) {
                      if (typeof l != 'function' && l !== null)
                        throw new TypeError(
                          'Super expression must either be null or a function'
                        );
                      (c.prototype = Object.create(l && l.prototype, {
                        constructor: {
                          value: c,
                          writable: !0,
                          configurable: !0
                        }
                      })),
                        l && O(c, l);
                    })(g, v),
                    (h = g),
                    (T = [
                      {
                        key: 'isContentEditable',
                        value: function (c) {
                          return (
                            c.isContentEditable ||
                            (c.getAttribute &&
                              c.getAttribute('g_editable') === 'true')
                          );
                        }
                      },
                      {
                        key: 'isSpecificTag',
                        value: function (c, l) {
                          return c && c.nodeName && c.nodeName.search(l) >= 0;
                        }
                      },
                      {
                        key: 'isInsideSpecificTag',
                        value: function (c, l) {
                          var r =
                              arguments.length > 2 &&
                              arguments[2] !== void 0 &&
                              arguments[2],
                            d = c;
                          if (r && this.isSpecificTag(d, l)) return !0;
                          for (; d.parentNode; )
                            if (((d = d.parentNode), this.isSpecificTag(d, l)))
                              return !0;
                          return !1;
                        }
                      },
                      {
                        key: 'canIgnoreNode',
                        value: function (c) {
                          var l = c;
                          if (
                            l &&
                            (this.isSpecificTag(l, this.ignoredTags) ||
                              this.isContentEditable(l))
                          )
                            return !0;
                          for (; l.parentNode; )
                            if (
                              (l = l.parentNode) &&
                              (this.isSpecificTag(l, this.ignoredTags) ||
                                this.isContentEditable(l))
                            )
                              return !0;
                          return !1;
                        }
                      },
                      {
                        key: 'isFirstTextChild',
                        value: function (c, l) {
                          for (var r = c.childNodes, d = 0; d < r.length; d++) {
                            var w = r[d];
                            if (
                              w.nodeType !== Node.COMMENT_NODE &&
                              w.textContent
                            )
                              return w === l;
                          }
                          return !1;
                        }
                      },
                      {
                        key: 'isLastTextChild',
                        value: function (c, l) {
                          for (
                            var r = c.childNodes, d = r.length - 1;
                            d > -1;
                            d--
                          ) {
                            var w = r[d];
                            if (
                              w.nodeType !== Node.COMMENT_NODE &&
                              w.textContent
                            )
                              return w === l;
                          }
                          return !1;
                        }
                      },
                      {
                        key: 'spacingNodeByXPath',
                        value: function (c, l) {
                          if (
                            l instanceof Node &&
                            !(l instanceof DocumentFragment)
                          )
                            for (
                              var r,
                                d,
                                w = document.evaluate(
                                  c,
                                  l,
                                  null,
                                  XPathResult.ORDERED_NODE_SNAPSHOT_TYPE,
                                  null
                                ),
                                E = w.snapshotLength - 1;
                              E > -1;
                              --E
                            ) {
                              if (
                                ((r = w.snapshotItem(E)),
                                this.isSpecificTag(
                                  r.parentNode,
                                  this.presentationalTags
                                ) &&
                                  !this.isInsideSpecificTag(
                                    r.parentNode,
                                    this.ignoredTags
                                  ))
                              ) {
                                var R = r.parentNode;
                                if (R.previousSibling) {
                                  var N = R.previousSibling;
                                  if (N.nodeType === Node.TEXT_NODE) {
                                    var V =
                                        N.data.substr(-1) +
                                        r.data.toString().charAt(0),
                                      I = this.spacing(V);
                                    V !== I &&
                                      (N.data = ''.concat(N.data, ' '));
                                  }
                                }
                                if (R.nextSibling) {
                                  var t = R.nextSibling;
                                  if (t.nodeType === Node.TEXT_NODE) {
                                    var f =
                                        r.data.substr(-1) +
                                        t.data.toString().charAt(0),
                                      D = this.spacing(f);
                                    f !== D && (t.data = ' '.concat(t.data));
                                  }
                                }
                              }
                              if (this.canIgnoreNode(r)) d = r;
                              else {
                                var L = this.spacing(r.data);
                                if ((r.data !== L && (r.data = L), d)) {
                                  if (
                                    r.nextSibling &&
                                    r.nextSibling.nodeName.search(
                                      this.spaceLikeTags
                                    ) >= 0
                                  ) {
                                    d = r;
                                    continue;
                                  }
                                  var P =
                                      r.data.toString().substr(-1) +
                                      d.data.toString().substr(0, 1),
                                    B = this.spacing(P);
                                  if (B !== P) {
                                    for (
                                      var A = d;
                                      A.parentNode &&
                                      A.nodeName.search(
                                        this.spaceSensitiveTags
                                      ) === -1 &&
                                      this.isFirstTextChild(A.parentNode, A);

                                    )
                                      A = A.parentNode;
                                    for (
                                      var k = r;
                                      k.parentNode &&
                                      k.nodeName.search(
                                        this.spaceSensitiveTags
                                      ) === -1 &&
                                      this.isLastTextChild(k.parentNode, k);

                                    )
                                      k = k.parentNode;
                                    if (
                                      k.nextSibling &&
                                      k.nextSibling.nodeName.search(
                                        this.spaceLikeTags
                                      ) >= 0
                                    ) {
                                      d = r;
                                      continue;
                                    }
                                    if (
                                      k.nodeName.search(this.blockTags) === -1
                                    )
                                      if (
                                        A.nodeName.search(
                                          this.spaceSensitiveTags
                                        ) === -1
                                      )
                                        A.nodeName.search(this.ignoredTags) ===
                                          -1 &&
                                          A.nodeName.search(this.blockTags) ===
                                            -1 &&
                                          (d.previousSibling
                                            ? d.previousSibling.nodeName.search(
                                                this.spaceLikeTags
                                              ) === -1 &&
                                              (d.data = ' '.concat(d.data))
                                            : this.canIgnoreNode(d) ||
                                              (d.data = ' '.concat(d.data)));
                                      else if (
                                        k.nodeName.search(
                                          this.spaceSensitiveTags
                                        ) === -1
                                      )
                                        r.data = ''.concat(r.data, ' ');
                                      else {
                                        var F = document.createElement('pangu');
                                        (F.innerHTML = ' '),
                                          A.previousSibling
                                            ? A.previousSibling.nodeName.search(
                                                this.spaceLikeTags
                                              ) === -1 &&
                                              A.parentNode.insertBefore(F, A)
                                            : A.parentNode.insertBefore(F, A),
                                          F.previousElementSibling ||
                                            (F.parentNode &&
                                              F.parentNode.removeChild(F));
                                      }
                                  }
                                }
                                d = r;
                              }
                            }
                        }
                      },
                      {
                        key: 'spacingNode',
                        value: function (c) {
                          var l = './/*/text()[normalize-space(.)]';
                          c.children &&
                            c.children.length === 0 &&
                            (l = './/text()[normalize-space(.)]'),
                            this.spacingNodeByXPath(l, c);
                        }
                      },
                      {
                        key: 'spacingElementById',
                        value: function (c) {
                          var l = 'id("'.concat(c, '")//text()');
                          this.spacingNodeByXPath(l, document);
                        }
                      },
                      {
                        key: 'spacingElementByClassName',
                        value: function (c) {
                          var l =
                            '//*[contains(concat(" ", normalize-space(@class), " "), "'.concat(
                              c,
                              '")]//text()'
                            );
                          this.spacingNodeByXPath(l, document);
                        }
                      },
                      {
                        key: 'spacingElementByTagName',
                        value: function (c) {
                          var l = '//'.concat(c, '//text()');
                          this.spacingNodeByXPath(l, document);
                        }
                      },
                      {
                        key: 'spacingPageTitle',
                        value: function () {
                          this.spacingNodeByXPath(
                            '/html/head/title/text()',
                            document
                          );
                        }
                      },
                      {
                        key: 'spacingPageBody',
                        value: function () {
                          var c = '/html/body//*/text()[normalize-space(.)]';
                          ['script', 'style', 'textarea'].forEach(function (l) {
                            c = ''
                              .concat(
                                c,
                                '[translate(name(..),"ABCDEFGHIJKLMNOPQRSTUVWXYZ","abcdefghijklmnopqrstuvwxyz")!="'
                              )
                              .concat(l, '"]');
                          }),
                            this.spacingNodeByXPath(c, document);
                        }
                      },
                      {
                        key: 'spacingPage',
                        value: function () {
                          this.spacingPageTitle(), this.spacingPageBody();
                        }
                      },
                      {
                        key: 'autoSpacingPage',
                        value: function () {
                          var c =
                              arguments.length > 0 && arguments[0] !== void 0
                                ? arguments[0]
                                : 1e3,
                            l =
                              arguments.length > 1 && arguments[1] !== void 0
                                ? arguments[1]
                                : 500,
                            r =
                              arguments.length > 2 && arguments[2] !== void 0
                                ? arguments[2]
                                : 2e3;
                          if (
                            document.body instanceof Node &&
                            !this.isAutoSpacingPageExecuted
                          ) {
                            this.isAutoSpacingPageExecuted = !0;
                            var d = this,
                              w = (function (f) {
                                var D = this,
                                  L = arguments,
                                  P = !1;
                                return function () {
                                  if (!P) {
                                    var B = D;
                                    (P = !0), f.apply(B, L);
                                  }
                                };
                              })(function () {
                                d.spacingPage();
                              }),
                              E = document.getElementsByTagName('video');
                            if (E.length === 0)
                              setTimeout(function () {
                                w();
                              }, c);
                            else
                              for (var R = 0; R < E.length; R++) {
                                var N = E[R];
                                if (N.readyState === 4) {
                                  setTimeout(function () {
                                    w();
                                  }, 3e3);
                                  break;
                                }
                                N.addEventListener('loadeddata', function () {
                                  setTimeout(function () {
                                    w();
                                  }, 4e3);
                                });
                              }
                            var V = [],
                              I = (function (f, D, L) {
                                var P = this,
                                  B = arguments,
                                  A = null,
                                  k = null;
                                return function () {
                                  var F = P,
                                    $ = B,
                                    M = +new Date();
                                  clearTimeout(A),
                                    k || (k = M),
                                    M - k >= L
                                      ? (f.apply(F, $), (k = M))
                                      : (A = setTimeout(function () {
                                          f.apply(F, $);
                                        }, D));
                                };
                              })(
                                function () {
                                  for (; V.length; ) {
                                    var f = V.shift();
                                    f && d.spacingNode(f);
                                  }
                                },
                                l,
                                { maxWait: r }
                              ),
                              t = new MutationObserver(function (f, D) {
                                f.forEach(function (L) {
                                  switch (L.type) {
                                    case 'childList':
                                      L.addedNodes.forEach(function (B) {
                                        B.nodeType === Node.ELEMENT_NODE
                                          ? V.push(B)
                                          : B.nodeType === Node.TEXT_NODE &&
                                            V.push(B.parentNode);
                                      });
                                      break;
                                    case 'characterData':
                                      var P = L.target;
                                      P.nodeType === Node.TEXT_NODE &&
                                        V.push(P.parentNode);
                                  }
                                }),
                                  I();
                              });
                            t.observe(document.body, {
                              characterData: !0,
                              childList: !0,
                              subtree: !0
                            });
                          }
                        }
                      }
                    ]) && y(h.prototype, T),
                    z && y(h, z),
                    g
                  );
                  var h, T, z;
                })(s(1).Pangu),
                C = new x();
              (p.exports = C), (p.exports.default = C), (p.exports.Pangu = x);
            }) == 'function'
              ? n.apply(a, o)
              : n) === void 0 || (p.exports = u);
      },
      function (p, a, s) {
        var n, o, u;
        (o = []),
          (u =
            typeof (n = function () {
              function m(j) {
                return (m =
                  typeof Symbol == 'function' &&
                  typeof Symbol.iterator == 'symbol'
                    ? function (G) {
                        return typeof G;
                      }
                    : function (G) {
                        return G &&
                          typeof Symbol == 'function' &&
                          G.constructor === Symbol &&
                          G !== Symbol.prototype
                          ? 'symbol'
                          : typeof G;
                      })(j);
              }
              function y(j, G) {
                for (var Z = 0; Z < G.length; Z++) {
                  var H = G[Z];
                  (H.enumerable = H.enumerable || !1),
                    (H.configurable = !0),
                    'value' in H && (H.writable = !0),
                    Object.defineProperty(j, H.key, H);
                }
              }
              var e =
                  '\u2E80-\u2EFF\u2F00-\u2FDF\u3040-\u309F\u30A0-\u30FA\u30FC-\u30FF\u3100-\u312F\u3200-\u32FF\u3400-\u4DBF\u4E00-\u9FFF\uF900-\uFAFF',
                S = new RegExp('['.concat(e, ']')),
                O = new RegExp(
                  '(['.concat(e, '])[ ]*([\\:]+|\\.)[ ]*([').concat(e, '])'),
                  'g'
                ),
                x = new RegExp('(['.concat(e, '])[ ]*([~\\!;,\\?]+)[ ]*'), 'g'),
                C = new RegExp('([\\.]{2,}|\u2026)(['.concat(e, '])'), 'g'),
                v = new RegExp('(['.concat(e, '])\\:([A-Z0-9\\(\\)])'), 'g'),
                g = new RegExp('(['.concat(e, '])([`"\u05F4])'), 'g'),
                h = new RegExp('([`"\u05F4])(['.concat(e, '])'), 'g'),
                T = /([`"\u05f4]+)[ ]*(.+?)[ ]*([`"\u05f4]+)/g,
                z = new RegExp('(['.concat(e, "])('[^s])"), 'g'),
                c = new RegExp("(')([".concat(e, '])'), 'g'),
                l = new RegExp('([A-Za-z0-9'.concat(e, "])( )('s)"), 'g'),
                r = new RegExp(
                  '(['
                    .concat(e, '])(#)([')
                    .concat(e, ']+)(#)([')
                    .concat(e, '])'),
                  'g'
                ),
                d = new RegExp('(['.concat(e, '])(#([^ ]))'), 'g'),
                w = new RegExp('(([^ ])#)(['.concat(e, '])'), 'g'),
                E = new RegExp(
                  '(['.concat(e, '])([\\+\\-\\*\\/=&\\|<>])([A-Za-z0-9])'),
                  'g'
                ),
                R = new RegExp(
                  '([A-Za-z0-9])([\\+\\-\\*\\/=&\\|<>])(['.concat(e, '])'),
                  'g'
                ),
                N = /([\/]) ([a-z\-_\.\/]+)/g,
                V = /([\/\.])([A-Za-z\-_\.\/]+) ([\/])/g,
                I = new RegExp('(['.concat(e, '])([\\(\\[\\{<>\u201C])'), 'g'),
                t = new RegExp('([\\)\\]\\}<>\u201D])(['.concat(e, '])'), 'g'),
                f = /([\(\[\{<\u201c]+)[ ]*(.+?)[ ]*([\)\]\}>\u201d]+)/,
                D = new RegExp(
                  '([A-Za-z0-9'
                    .concat(e, '])[ ]*([\u201C])([A-Za-z0-9')
                    .concat(e, '\\-_ ]+)([\u201D])'),
                  'g'
                ),
                L = new RegExp(
                  '([\u201C])([A-Za-z0-9'
                    .concat(e, '\\-_ ]+)([\u201D])[ ]*([A-Za-z0-9')
                    .concat(e, '])'),
                  'g'
                ),
                P = /([A-Za-z0-9])([\(\[\{])/g,
                B = /([\)\]\}])([A-Za-z0-9])/g,
                A = new RegExp(
                  '(['.concat(
                    e,
                    '])([A-Za-z\u0370-\u03FF0-9@\\$%\\^&\\*\\-\\+\\\\=\\|/\xA1-\xFF\u2150-\u218F\u2700\u2014\u27BF])'
                  ),
                  'g'
                ),
                k = new RegExp(
                  '([A-Za-z\u0370-\u03FF0-9~\\$%\\^&\\*\\-\\+\\\\=\\|/!;:,\\.\\?\xA1-\xFF\u2150-\u218F\u2700\u2014\u27BF])(['.concat(
                    e,
                    '])'
                  ),
                  'g'
                ),
                F = /(%)([A-Za-z])/g,
                $ = /([ ]*)([\u00b7\u2022\u2027])([ ]*)/g,
                M = (function () {
                  function j() {
                    (function (U, _) {
                      if (!(U instanceof _))
                        throw new TypeError(
                          'Cannot call a class as a function'
                        );
                    })(this, j),
                      (this.version = '4.0.7');
                  }
                  return (
                    (G = j),
                    (Z = [
                      {
                        key: 'convertToFullwidth',
                        value: function (U) {
                          return U.replace(/~/g, '\uFF5E')
                            .replace(/!/g, '\uFF01')
                            .replace(/;/g, '\uFF1B')
                            .replace(/:/g, '\uFF1A')
                            .replace(/,/g, '\uFF0C')
                            .replace(/\./g, '\u3002')
                            .replace(/\?/g, '\uFF1F');
                        }
                      },
                      {
                        key: 'spacing',
                        value: function (U) {
                          if (typeof U != 'string')
                            return (
                              console.warn(
                                'spacing(text) only accepts string but got '.concat(
                                  m(U)
                                )
                              ),
                              U
                            );
                          if (U.length <= 1 || !S.test(U)) return U;
                          var _ = this,
                            b = U;
                          return (b = (b = (b = (b = (b = (b = (b = (b = (b =
                            (b = (b = (b = (b = (b = (b = (b = (b = (b = (b =
                              (b = (b = (b = (b = (b = (b = (b = (b = (b =
                                b.replace(O, function (J, Y, X, K) {
                                  var W = _.convertToFullwidth(X);
                                  return ''.concat(Y).concat(W).concat(K);
                                })).replace(x, function (J, Y, X) {
                                var K = _.convertToFullwidth(X);
                                return ''.concat(Y).concat(K);
                              })).replace(C, '$1 $2')).replace(
                                v,
                                '$1\uFF1A$2'
                              )).replace(g, '$1 $2')).replace(
                                h,
                                '$1 $2'
                              )).replace(T, '$1$2$3')).replace(
                                z,
                                '$1 $2'
                              )).replace(c, '$1 $2')).replace(
                                l,
                                "$1's"
                              )).replace(r, '$1 $2$3$4 $5')).replace(
                              d,
                              '$1 $2'
                            )).replace(w, '$1 $3')).replace(
                              E,
                              '$1 $2 $3'
                            )).replace(R, '$1 $2 $3')).replace(
                              N,
                              '$1$2'
                            )).replace(V, '$1$2$3')).replace(
                              I,
                              '$1 $2'
                            )).replace(t, '$1 $2')).replace(
                              f,
                              '$1$2$3'
                            )).replace(D, '$1 $2$3$4')).replace(
                            L,
                            '$1$2$3 $4'
                          )).replace(P, '$1 $2')).replace(B, '$1 $2')).replace(
                            A,
                            '$1 $2'
                          )).replace(k, '$1 $2')).replace(F, '$1 $2')).replace(
                            $,
                            '\u30FB'
                          ));
                        }
                      },
                      {
                        key: 'spacingText',
                        value: function (U) {
                          var _,
                            b =
                              arguments.length > 1 && arguments[1] !== void 0
                                ? arguments[1]
                                : function () {};
                          try {
                            _ = this.spacing(U);
                          } catch (J) {
                            return void b(J);
                          }
                          b(null, _);
                        }
                      },
                      {
                        key: 'spacingTextSync',
                        value: function (U) {
                          return this.spacing(U);
                        }
                      }
                    ]) && y(G.prototype, Z),
                    H && y(G, H),
                    j
                  );
                  var G, Z, H;
                })(),
                Q = new M();
              (p.exports = Q), (p.exports.default = Q), (p.exports.Pangu = M);
            }) == 'function'
              ? n.apply(a, o)
              : n) === void 0 || (p.exports = u);
      }
    ]);
  });
})(pangu_min);
var pangu_minExports = pangu_min.exports,
  utils = {};
const Aacute = '\xC1',
  aacute = '\xE1',
  Abreve = '\u0102',
  abreve = '\u0103',
  ac = '\u223E',
  acd = '\u223F',
  acE = '\u223E\u0333',
  Acirc = '\xC2',
  acirc = '\xE2',
  acute = '\xB4',
  Acy = '\u0410',
  acy = '\u0430',
  AElig = '\xC6',
  aelig = '\xE6',
  af = '\u2061',
  Afr = '\u{1D504}',
  afr = '\u{1D51E}',
  Agrave = '\xC0',
  agrave = '\xE0',
  alefsym = '\u2135',
  aleph = '\u2135',
  Alpha = '\u0391',
  alpha = '\u03B1',
  Amacr = '\u0100',
  amacr = '\u0101',
  amalg = '\u2A3F',
  amp = '&',
  AMP = '&',
  andand = '\u2A55',
  And = '\u2A53',
  and = '\u2227',
  andd = '\u2A5C',
  andslope = '\u2A58',
  andv = '\u2A5A',
  ang = '\u2220',
  ange = '\u29A4',
  angle = '\u2220',
  angmsdaa = '\u29A8',
  angmsdab = '\u29A9',
  angmsdac = '\u29AA',
  angmsdad = '\u29AB',
  angmsdae = '\u29AC',
  angmsdaf = '\u29AD',
  angmsdag = '\u29AE',
  angmsdah = '\u29AF',
  angmsd = '\u2221',
  angrt = '\u221F',
  angrtvb = '\u22BE',
  angrtvbd = '\u299D',
  angsph = '\u2222',
  angst = '\xC5',
  angzarr = '\u237C',
  Aogon = '\u0104',
  aogon = '\u0105',
  Aopf = '\u{1D538}',
  aopf = '\u{1D552}',
  apacir = '\u2A6F',
  ap = '\u2248',
  apE = '\u2A70',
  ape = '\u224A',
  apid = '\u224B',
  apos = "'",
  ApplyFunction = '\u2061',
  approx = '\u2248',
  approxeq = '\u224A',
  Aring = '\xC5',
  aring = '\xE5',
  Ascr = '\u{1D49C}',
  ascr = '\u{1D4B6}',
  Assign = '\u2254',
  ast = '*',
  asymp = '\u2248',
  asympeq = '\u224D',
  Atilde = '\xC3',
  atilde = '\xE3',
  Auml = '\xC4',
  auml = '\xE4',
  awconint = '\u2233',
  awint = '\u2A11',
  backcong = '\u224C',
  backepsilon = '\u03F6',
  backprime = '\u2035',
  backsim = '\u223D',
  backsimeq = '\u22CD',
  Backslash = '\u2216',
  Barv = '\u2AE7',
  barvee = '\u22BD',
  barwed = '\u2305',
  Barwed = '\u2306',
  barwedge = '\u2305',
  bbrk = '\u23B5',
  bbrktbrk = '\u23B6',
  bcong = '\u224C',
  Bcy = '\u0411',
  bcy = '\u0431',
  bdquo = '\u201E',
  becaus = '\u2235',
  because = '\u2235',
  Because = '\u2235',
  bemptyv = '\u29B0',
  bepsi = '\u03F6',
  bernou = '\u212C',
  Bernoullis = '\u212C',
  Beta = '\u0392',
  beta = '\u03B2',
  beth = '\u2136',
  between = '\u226C',
  Bfr = '\u{1D505}',
  bfr = '\u{1D51F}',
  bigcap = '\u22C2',
  bigcirc = '\u25EF',
  bigcup = '\u22C3',
  bigodot = '\u2A00',
  bigoplus = '\u2A01',
  bigotimes = '\u2A02',
  bigsqcup = '\u2A06',
  bigstar = '\u2605',
  bigtriangledown = '\u25BD',
  bigtriangleup = '\u25B3',
  biguplus = '\u2A04',
  bigvee = '\u22C1',
  bigwedge = '\u22C0',
  bkarow = '\u290D',
  blacklozenge = '\u29EB',
  blacksquare = '\u25AA',
  blacktriangle = '\u25B4',
  blacktriangledown = '\u25BE',
  blacktriangleleft = '\u25C2',
  blacktriangleright = '\u25B8',
  blank = '\u2423',
  blk12 = '\u2592',
  blk14 = '\u2591',
  blk34 = '\u2593',
  block = '\u2588',
  bne = '=\u20E5',
  bnequiv = '\u2261\u20E5',
  bNot = '\u2AED',
  bnot = '\u2310',
  Bopf = '\u{1D539}',
  bopf = '\u{1D553}',
  bot = '\u22A5',
  bottom = '\u22A5',
  bowtie = '\u22C8',
  boxbox = '\u29C9',
  boxdl = '\u2510',
  boxdL = '\u2555',
  boxDl = '\u2556',
  boxDL = '\u2557',
  boxdr = '\u250C',
  boxdR = '\u2552',
  boxDr = '\u2553',
  boxDR = '\u2554',
  boxh = '\u2500',
  boxH = '\u2550',
  boxhd = '\u252C',
  boxHd = '\u2564',
  boxhD = '\u2565',
  boxHD = '\u2566',
  boxhu = '\u2534',
  boxHu = '\u2567',
  boxhU = '\u2568',
  boxHU = '\u2569',
  boxminus = '\u229F',
  boxplus = '\u229E',
  boxtimes = '\u22A0',
  boxul = '\u2518',
  boxuL = '\u255B',
  boxUl = '\u255C',
  boxUL = '\u255D',
  boxur = '\u2514',
  boxuR = '\u2558',
  boxUr = '\u2559',
  boxUR = '\u255A',
  boxv = '\u2502',
  boxV = '\u2551',
  boxvh = '\u253C',
  boxvH = '\u256A',
  boxVh = '\u256B',
  boxVH = '\u256C',
  boxvl = '\u2524',
  boxvL = '\u2561',
  boxVl = '\u2562',
  boxVL = '\u2563',
  boxvr = '\u251C',
  boxvR = '\u255E',
  boxVr = '\u255F',
  boxVR = '\u2560',
  bprime = '\u2035',
  breve = '\u02D8',
  Breve = '\u02D8',
  brvbar = '\xA6',
  bscr = '\u{1D4B7}',
  Bscr = '\u212C',
  bsemi = '\u204F',
  bsim = '\u223D',
  bsime = '\u22CD',
  bsolb = '\u29C5',
  bsol = '\\',
  bsolhsub = '\u27C8',
  bull = '\u2022',
  bullet = '\u2022',
  bump = '\u224E',
  bumpE = '\u2AAE',
  bumpe = '\u224F',
  Bumpeq = '\u224E',
  bumpeq = '\u224F',
  Cacute = '\u0106',
  cacute = '\u0107',
  capand = '\u2A44',
  capbrcup = '\u2A49',
  capcap = '\u2A4B',
  cap = '\u2229',
  Cap = '\u22D2',
  capcup = '\u2A47',
  capdot = '\u2A40',
  CapitalDifferentialD = '\u2145',
  caps = '\u2229\uFE00',
  caret = '\u2041',
  caron = '\u02C7',
  Cayleys = '\u212D',
  ccaps = '\u2A4D',
  Ccaron = '\u010C',
  ccaron = '\u010D',
  Ccedil = '\xC7',
  ccedil = '\xE7',
  Ccirc = '\u0108',
  ccirc = '\u0109',
  Cconint = '\u2230',
  ccups = '\u2A4C',
  ccupssm = '\u2A50',
  Cdot = '\u010A',
  cdot = '\u010B',
  cedil = '\xB8',
  Cedilla = '\xB8',
  cemptyv = '\u29B2',
  cent = '\xA2',
  centerdot = '\xB7',
  CenterDot = '\xB7',
  cfr = '\u{1D520}',
  Cfr = '\u212D',
  CHcy = '\u0427',
  chcy = '\u0447',
  check = '\u2713',
  checkmark = '\u2713',
  Chi = '\u03A7',
  chi = '\u03C7',
  circ = '\u02C6',
  circeq = '\u2257',
  circlearrowleft = '\u21BA',
  circlearrowright = '\u21BB',
  circledast = '\u229B',
  circledcirc = '\u229A',
  circleddash = '\u229D',
  CircleDot = '\u2299',
  circledR = '\xAE',
  circledS = '\u24C8',
  CircleMinus = '\u2296',
  CirclePlus = '\u2295',
  CircleTimes = '\u2297',
  cir = '\u25CB',
  cirE = '\u29C3',
  cire = '\u2257',
  cirfnint = '\u2A10',
  cirmid = '\u2AEF',
  cirscir = '\u29C2',
  ClockwiseContourIntegral = '\u2232',
  CloseCurlyDoubleQuote = '\u201D',
  CloseCurlyQuote = '\u2019',
  clubs = '\u2663',
  clubsuit = '\u2663',
  colon = ':',
  Colon = '\u2237',
  Colone = '\u2A74',
  colone = '\u2254',
  coloneq = '\u2254',
  comma = ',',
  commat = '@',
  comp = '\u2201',
  compfn = '\u2218',
  complement = '\u2201',
  complexes = '\u2102',
  cong = '\u2245',
  congdot = '\u2A6D',
  Congruent = '\u2261',
  conint = '\u222E',
  Conint = '\u222F',
  ContourIntegral = '\u222E',
  copf = '\u{1D554}',
  Copf = '\u2102',
  coprod = '\u2210',
  Coproduct = '\u2210',
  copy = '\xA9',
  COPY = '\xA9',
  copysr = '\u2117',
  CounterClockwiseContourIntegral = '\u2233',
  crarr = '\u21B5',
  cross = '\u2717',
  Cross = '\u2A2F',
  Cscr = '\u{1D49E}',
  cscr = '\u{1D4B8}',
  csub = '\u2ACF',
  csube = '\u2AD1',
  csup = '\u2AD0',
  csupe = '\u2AD2',
  ctdot = '\u22EF',
  cudarrl = '\u2938',
  cudarrr = '\u2935',
  cuepr = '\u22DE',
  cuesc = '\u22DF',
  cularr = '\u21B6',
  cularrp = '\u293D',
  cupbrcap = '\u2A48',
  cupcap = '\u2A46',
  CupCap = '\u224D',
  cup = '\u222A',
  Cup = '\u22D3',
  cupcup = '\u2A4A',
  cupdot = '\u228D',
  cupor = '\u2A45',
  cups = '\u222A\uFE00',
  curarr = '\u21B7',
  curarrm = '\u293C',
  curlyeqprec = '\u22DE',
  curlyeqsucc = '\u22DF',
  curlyvee = '\u22CE',
  curlywedge = '\u22CF',
  curren = '\xA4',
  curvearrowleft = '\u21B6',
  curvearrowright = '\u21B7',
  cuvee = '\u22CE',
  cuwed = '\u22CF',
  cwconint = '\u2232',
  cwint = '\u2231',
  cylcty = '\u232D',
  dagger = '\u2020',
  Dagger = '\u2021',
  daleth = '\u2138',
  darr = '\u2193',
  Darr = '\u21A1',
  dArr = '\u21D3',
  dash = '\u2010',
  Dashv = '\u2AE4',
  dashv = '\u22A3',
  dbkarow = '\u290F',
  dblac = '\u02DD',
  Dcaron = '\u010E',
  dcaron = '\u010F',
  Dcy = '\u0414',
  dcy = '\u0434',
  ddagger = '\u2021',
  ddarr = '\u21CA',
  DD = '\u2145',
  dd = '\u2146',
  DDotrahd = '\u2911',
  ddotseq = '\u2A77',
  deg = '\xB0',
  Del = '\u2207',
  Delta = '\u0394',
  delta = '\u03B4',
  demptyv = '\u29B1',
  dfisht = '\u297F',
  Dfr = '\u{1D507}',
  dfr = '\u{1D521}',
  dHar = '\u2965',
  dharl = '\u21C3',
  dharr = '\u21C2',
  DiacriticalAcute = '\xB4',
  DiacriticalDot = '\u02D9',
  DiacriticalDoubleAcute = '\u02DD',
  DiacriticalGrave = '`',
  DiacriticalTilde = '\u02DC',
  diam = '\u22C4',
  diamond = '\u22C4',
  Diamond = '\u22C4',
  diamondsuit = '\u2666',
  diams = '\u2666',
  die = '\xA8',
  DifferentialD = '\u2146',
  digamma = '\u03DD',
  disin = '\u22F2',
  div = '\xF7',
  divide = '\xF7',
  divideontimes = '\u22C7',
  divonx = '\u22C7',
  DJcy = '\u0402',
  djcy = '\u0452',
  dlcorn = '\u231E',
  dlcrop = '\u230D',
  dollar = '$',
  Dopf = '\u{1D53B}',
  dopf = '\u{1D555}',
  Dot = '\xA8',
  dot = '\u02D9',
  DotDot = '\u20DC',
  doteq = '\u2250',
  doteqdot = '\u2251',
  DotEqual = '\u2250',
  dotminus = '\u2238',
  dotplus = '\u2214',
  dotsquare = '\u22A1',
  doublebarwedge = '\u2306',
  DoubleContourIntegral = '\u222F',
  DoubleDot = '\xA8',
  DoubleDownArrow = '\u21D3',
  DoubleLeftArrow = '\u21D0',
  DoubleLeftRightArrow = '\u21D4',
  DoubleLeftTee = '\u2AE4',
  DoubleLongLeftArrow = '\u27F8',
  DoubleLongLeftRightArrow = '\u27FA',
  DoubleLongRightArrow = '\u27F9',
  DoubleRightArrow = '\u21D2',
  DoubleRightTee = '\u22A8',
  DoubleUpArrow = '\u21D1',
  DoubleUpDownArrow = '\u21D5',
  DoubleVerticalBar = '\u2225',
  DownArrowBar = '\u2913',
  downarrow = '\u2193',
  DownArrow = '\u2193',
  Downarrow = '\u21D3',
  DownArrowUpArrow = '\u21F5',
  DownBreve = '\u0311',
  downdownarrows = '\u21CA',
  downharpoonleft = '\u21C3',
  downharpoonright = '\u21C2',
  DownLeftRightVector = '\u2950',
  DownLeftTeeVector = '\u295E',
  DownLeftVectorBar = '\u2956',
  DownLeftVector = '\u21BD',
  DownRightTeeVector = '\u295F',
  DownRightVectorBar = '\u2957',
  DownRightVector = '\u21C1',
  DownTeeArrow = '\u21A7',
  DownTee = '\u22A4',
  drbkarow = '\u2910',
  drcorn = '\u231F',
  drcrop = '\u230C',
  Dscr = '\u{1D49F}',
  dscr = '\u{1D4B9}',
  DScy = '\u0405',
  dscy = '\u0455',
  dsol = '\u29F6',
  Dstrok = '\u0110',
  dstrok = '\u0111',
  dtdot = '\u22F1',
  dtri = '\u25BF',
  dtrif = '\u25BE',
  duarr = '\u21F5',
  duhar = '\u296F',
  dwangle = '\u29A6',
  DZcy = '\u040F',
  dzcy = '\u045F',
  dzigrarr = '\u27FF',
  Eacute = '\xC9',
  eacute = '\xE9',
  easter = '\u2A6E',
  Ecaron = '\u011A',
  ecaron = '\u011B',
  Ecirc = '\xCA',
  ecirc = '\xEA',
  ecir = '\u2256',
  ecolon = '\u2255',
  Ecy = '\u042D',
  ecy = '\u044D',
  eDDot = '\u2A77',
  Edot = '\u0116',
  edot = '\u0117',
  eDot = '\u2251',
  ee = '\u2147',
  efDot = '\u2252',
  Efr = '\u{1D508}',
  efr = '\u{1D522}',
  eg = '\u2A9A',
  Egrave = '\xC8',
  egrave = '\xE8',
  egs = '\u2A96',
  egsdot = '\u2A98',
  el = '\u2A99',
  Element = '\u2208',
  elinters = '\u23E7',
  ell = '\u2113',
  els = '\u2A95',
  elsdot = '\u2A97',
  Emacr = '\u0112',
  emacr = '\u0113',
  empty = '\u2205',
  emptyset = '\u2205',
  EmptySmallSquare = '\u25FB',
  emptyv = '\u2205',
  EmptyVerySmallSquare = '\u25AB',
  emsp13 = '\u2004',
  emsp14 = '\u2005',
  emsp = '\u2003',
  ENG = '\u014A',
  eng = '\u014B',
  ensp = '\u2002',
  Eogon = '\u0118',
  eogon = '\u0119',
  Eopf = '\u{1D53C}',
  eopf = '\u{1D556}',
  epar = '\u22D5',
  eparsl = '\u29E3',
  eplus = '\u2A71',
  epsi = '\u03B5',
  Epsilon = '\u0395',
  epsilon = '\u03B5',
  epsiv = '\u03F5',
  eqcirc = '\u2256',
  eqcolon = '\u2255',
  eqsim = '\u2242',
  eqslantgtr = '\u2A96',
  eqslantless = '\u2A95',
  Equal = '\u2A75',
  equals = '=',
  EqualTilde = '\u2242',
  equest = '\u225F',
  Equilibrium = '\u21CC',
  equiv = '\u2261',
  equivDD = '\u2A78',
  eqvparsl = '\u29E5',
  erarr = '\u2971',
  erDot = '\u2253',
  escr = '\u212F',
  Escr = '\u2130',
  esdot = '\u2250',
  Esim = '\u2A73',
  esim = '\u2242',
  Eta = '\u0397',
  eta = '\u03B7',
  ETH = '\xD0',
  eth = '\xF0',
  Euml = '\xCB',
  euml = '\xEB',
  euro = '\u20AC',
  excl = '!',
  exist = '\u2203',
  Exists = '\u2203',
  expectation = '\u2130',
  exponentiale = '\u2147',
  ExponentialE = '\u2147',
  fallingdotseq = '\u2252',
  Fcy = '\u0424',
  fcy = '\u0444',
  female = '\u2640',
  ffilig = '\uFB03',
  fflig = '\uFB00',
  ffllig = '\uFB04',
  Ffr = '\u{1D509}',
  ffr = '\u{1D523}',
  filig = '\uFB01',
  FilledSmallSquare = '\u25FC',
  FilledVerySmallSquare = '\u25AA',
  fjlig = 'fj',
  flat = '\u266D',
  fllig = '\uFB02',
  fltns = '\u25B1',
  fnof = '\u0192',
  Fopf = '\u{1D53D}',
  fopf = '\u{1D557}',
  forall = '\u2200',
  ForAll = '\u2200',
  fork = '\u22D4',
  forkv = '\u2AD9',
  Fouriertrf = '\u2131',
  fpartint = '\u2A0D',
  frac12 = '\xBD',
  frac13 = '\u2153',
  frac14 = '\xBC',
  frac15 = '\u2155',
  frac16 = '\u2159',
  frac18 = '\u215B',
  frac23 = '\u2154',
  frac25 = '\u2156',
  frac34 = '\xBE',
  frac35 = '\u2157',
  frac38 = '\u215C',
  frac45 = '\u2158',
  frac56 = '\u215A',
  frac58 = '\u215D',
  frac78 = '\u215E',
  frasl = '\u2044',
  frown = '\u2322',
  fscr = '\u{1D4BB}',
  Fscr = '\u2131',
  gacute = '\u01F5',
  Gamma = '\u0393',
  gamma = '\u03B3',
  Gammad = '\u03DC',
  gammad = '\u03DD',
  gap = '\u2A86',
  Gbreve = '\u011E',
  gbreve = '\u011F',
  Gcedil = '\u0122',
  Gcirc = '\u011C',
  gcirc = '\u011D',
  Gcy = '\u0413',
  gcy = '\u0433',
  Gdot = '\u0120',
  gdot = '\u0121',
  ge = '\u2265',
  gE = '\u2267',
  gEl = '\u2A8C',
  gel = '\u22DB',
  geq = '\u2265',
  geqq = '\u2267',
  geqslant = '\u2A7E',
  gescc = '\u2AA9',
  ges = '\u2A7E',
  gesdot = '\u2A80',
  gesdoto = '\u2A82',
  gesdotol = '\u2A84',
  gesl = '\u22DB\uFE00',
  gesles = '\u2A94',
  Gfr = '\u{1D50A}',
  gfr = '\u{1D524}',
  gg = '\u226B',
  Gg = '\u22D9',
  ggg = '\u22D9',
  gimel = '\u2137',
  GJcy = '\u0403',
  gjcy = '\u0453',
  gla = '\u2AA5',
  gl = '\u2277',
  glE = '\u2A92',
  glj = '\u2AA4',
  gnap = '\u2A8A',
  gnapprox = '\u2A8A',
  gne = '\u2A88',
  gnE = '\u2269',
  gneq = '\u2A88',
  gneqq = '\u2269',
  gnsim = '\u22E7',
  Gopf = '\u{1D53E}',
  gopf = '\u{1D558}',
  grave = '`',
  GreaterEqual = '\u2265',
  GreaterEqualLess = '\u22DB',
  GreaterFullEqual = '\u2267',
  GreaterGreater = '\u2AA2',
  GreaterLess = '\u2277',
  GreaterSlantEqual = '\u2A7E',
  GreaterTilde = '\u2273',
  Gscr = '\u{1D4A2}',
  gscr = '\u210A',
  gsim = '\u2273',
  gsime = '\u2A8E',
  gsiml = '\u2A90',
  gtcc = '\u2AA7',
  gtcir = '\u2A7A',
  gt = '>',
  GT = '>',
  Gt = '\u226B',
  gtdot = '\u22D7',
  gtlPar = '\u2995',
  gtquest = '\u2A7C',
  gtrapprox = '\u2A86',
  gtrarr = '\u2978',
  gtrdot = '\u22D7',
  gtreqless = '\u22DB',
  gtreqqless = '\u2A8C',
  gtrless = '\u2277',
  gtrsim = '\u2273',
  gvertneqq = '\u2269\uFE00',
  gvnE = '\u2269\uFE00',
  Hacek = '\u02C7',
  hairsp = '\u200A',
  half = '\xBD',
  hamilt = '\u210B',
  HARDcy = '\u042A',
  hardcy = '\u044A',
  harrcir = '\u2948',
  harr = '\u2194',
  hArr = '\u21D4',
  harrw = '\u21AD',
  Hat = '^',
  hbar = '\u210F',
  Hcirc = '\u0124',
  hcirc = '\u0125',
  hearts = '\u2665',
  heartsuit = '\u2665',
  hellip = '\u2026',
  hercon = '\u22B9',
  hfr = '\u{1D525}',
  Hfr = '\u210C',
  HilbertSpace = '\u210B',
  hksearow = '\u2925',
  hkswarow = '\u2926',
  hoarr = '\u21FF',
  homtht = '\u223B',
  hookleftarrow = '\u21A9',
  hookrightarrow = '\u21AA',
  hopf = '\u{1D559}',
  Hopf = '\u210D',
  horbar = '\u2015',
  HorizontalLine = '\u2500',
  hscr = '\u{1D4BD}',
  Hscr = '\u210B',
  hslash = '\u210F',
  Hstrok = '\u0126',
  hstrok = '\u0127',
  HumpDownHump = '\u224E',
  HumpEqual = '\u224F',
  hybull = '\u2043',
  hyphen = '\u2010',
  Iacute = '\xCD',
  iacute = '\xED',
  ic = '\u2063',
  Icirc = '\xCE',
  icirc = '\xEE',
  Icy = '\u0418',
  icy = '\u0438',
  Idot = '\u0130',
  IEcy = '\u0415',
  iecy = '\u0435',
  iexcl = '\xA1',
  iff = '\u21D4',
  ifr = '\u{1D526}',
  Ifr = '\u2111',
  Igrave = '\xCC',
  igrave = '\xEC',
  ii = '\u2148',
  iiiint = '\u2A0C',
  iiint = '\u222D',
  iinfin = '\u29DC',
  iiota = '\u2129',
  IJlig = '\u0132',
  ijlig = '\u0133',
  Imacr = '\u012A',
  imacr = '\u012B',
  image = '\u2111',
  ImaginaryI = '\u2148',
  imagline = '\u2110',
  imagpart = '\u2111',
  imath = '\u0131',
  Im = '\u2111',
  imof = '\u22B7',
  imped = '\u01B5',
  Implies = '\u21D2',
  incare = '\u2105',
  infin = '\u221E',
  infintie = '\u29DD',
  inodot = '\u0131',
  intcal = '\u22BA',
  int = '\u222B',
  Int = '\u222C',
  integers = '\u2124',
  Integral = '\u222B',
  intercal = '\u22BA',
  Intersection = '\u22C2',
  intlarhk = '\u2A17',
  intprod = '\u2A3C',
  InvisibleComma = '\u2063',
  InvisibleTimes = '\u2062',
  IOcy = '\u0401',
  iocy = '\u0451',
  Iogon = '\u012E',
  iogon = '\u012F',
  Iopf = '\u{1D540}',
  iopf = '\u{1D55A}',
  Iota = '\u0399',
  iota = '\u03B9',
  iprod = '\u2A3C',
  iquest = '\xBF',
  iscr = '\u{1D4BE}',
  Iscr = '\u2110',
  isin = '\u2208',
  isindot = '\u22F5',
  isinE = '\u22F9',
  isins = '\u22F4',
  isinsv = '\u22F3',
  isinv = '\u2208',
  it = '\u2062',
  Itilde = '\u0128',
  itilde = '\u0129',
  Iukcy = '\u0406',
  iukcy = '\u0456',
  Iuml = '\xCF',
  iuml = '\xEF',
  Jcirc = '\u0134',
  jcirc = '\u0135',
  Jcy = '\u0419',
  jcy = '\u0439',
  Jfr = '\u{1D50D}',
  jfr = '\u{1D527}',
  jmath = '\u0237',
  Jopf = '\u{1D541}',
  jopf = '\u{1D55B}',
  Jscr = '\u{1D4A5}',
  jscr = '\u{1D4BF}',
  Jsercy = '\u0408',
  jsercy = '\u0458',
  Jukcy = '\u0404',
  jukcy = '\u0454',
  Kappa = '\u039A',
  kappa = '\u03BA',
  kappav = '\u03F0',
  Kcedil = '\u0136',
  kcedil = '\u0137',
  Kcy = '\u041A',
  kcy = '\u043A',
  Kfr = '\u{1D50E}',
  kfr = '\u{1D528}',
  kgreen = '\u0138',
  KHcy = '\u0425',
  khcy = '\u0445',
  KJcy = '\u040C',
  kjcy = '\u045C',
  Kopf = '\u{1D542}',
  kopf = '\u{1D55C}',
  Kscr = '\u{1D4A6}',
  kscr = '\u{1D4C0}',
  lAarr = '\u21DA',
  Lacute = '\u0139',
  lacute = '\u013A',
  laemptyv = '\u29B4',
  lagran = '\u2112',
  Lambda = '\u039B',
  lambda = '\u03BB',
  lang = '\u27E8',
  Lang = '\u27EA',
  langd = '\u2991',
  langle = '\u27E8',
  lap = '\u2A85',
  Laplacetrf = '\u2112',
  laquo = '\xAB',
  larrb = '\u21E4',
  larrbfs = '\u291F',
  larr = '\u2190',
  Larr = '\u219E',
  lArr = '\u21D0',
  larrfs = '\u291D',
  larrhk = '\u21A9',
  larrlp = '\u21AB',
  larrpl = '\u2939',
  larrsim = '\u2973',
  larrtl = '\u21A2',
  latail = '\u2919',
  lAtail = '\u291B',
  lat = '\u2AAB',
  late = '\u2AAD',
  lates = '\u2AAD\uFE00',
  lbarr = '\u290C',
  lBarr = '\u290E',
  lbbrk = '\u2772',
  lbrace = '{',
  lbrack = '[',
  lbrke = '\u298B',
  lbrksld = '\u298F',
  lbrkslu = '\u298D',
  Lcaron = '\u013D',
  lcaron = '\u013E',
  Lcedil = '\u013B',
  lcedil = '\u013C',
  lceil = '\u2308',
  lcub = '{',
  Lcy = '\u041B',
  lcy = '\u043B',
  ldca = '\u2936',
  ldquo = '\u201C',
  ldquor = '\u201E',
  ldrdhar = '\u2967',
  ldrushar = '\u294B',
  ldsh = '\u21B2',
  le = '\u2264',
  lE = '\u2266',
  LeftAngleBracket = '\u27E8',
  LeftArrowBar = '\u21E4',
  leftarrow = '\u2190',
  LeftArrow = '\u2190',
  Leftarrow = '\u21D0',
  LeftArrowRightArrow = '\u21C6',
  leftarrowtail = '\u21A2',
  LeftCeiling = '\u2308',
  LeftDoubleBracket = '\u27E6',
  LeftDownTeeVector = '\u2961',
  LeftDownVectorBar = '\u2959',
  LeftDownVector = '\u21C3',
  LeftFloor = '\u230A',
  leftharpoondown = '\u21BD',
  leftharpoonup = '\u21BC',
  leftleftarrows = '\u21C7',
  leftrightarrow = '\u2194',
  LeftRightArrow = '\u2194',
  Leftrightarrow = '\u21D4',
  leftrightarrows = '\u21C6',
  leftrightharpoons = '\u21CB',
  leftrightsquigarrow = '\u21AD',
  LeftRightVector = '\u294E',
  LeftTeeArrow = '\u21A4',
  LeftTee = '\u22A3',
  LeftTeeVector = '\u295A',
  leftthreetimes = '\u22CB',
  LeftTriangleBar = '\u29CF',
  LeftTriangle = '\u22B2',
  LeftTriangleEqual = '\u22B4',
  LeftUpDownVector = '\u2951',
  LeftUpTeeVector = '\u2960',
  LeftUpVectorBar = '\u2958',
  LeftUpVector = '\u21BF',
  LeftVectorBar = '\u2952',
  LeftVector = '\u21BC',
  lEg = '\u2A8B',
  leg = '\u22DA',
  leq = '\u2264',
  leqq = '\u2266',
  leqslant = '\u2A7D',
  lescc = '\u2AA8',
  les = '\u2A7D',
  lesdot = '\u2A7F',
  lesdoto = '\u2A81',
  lesdotor = '\u2A83',
  lesg = '\u22DA\uFE00',
  lesges = '\u2A93',
  lessapprox = '\u2A85',
  lessdot = '\u22D6',
  lesseqgtr = '\u22DA',
  lesseqqgtr = '\u2A8B',
  LessEqualGreater = '\u22DA',
  LessFullEqual = '\u2266',
  LessGreater = '\u2276',
  lessgtr = '\u2276',
  LessLess = '\u2AA1',
  lesssim = '\u2272',
  LessSlantEqual = '\u2A7D',
  LessTilde = '\u2272',
  lfisht = '\u297C',
  lfloor = '\u230A',
  Lfr = '\u{1D50F}',
  lfr = '\u{1D529}',
  lg = '\u2276',
  lgE = '\u2A91',
  lHar = '\u2962',
  lhard = '\u21BD',
  lharu = '\u21BC',
  lharul = '\u296A',
  lhblk = '\u2584',
  LJcy = '\u0409',
  ljcy = '\u0459',
  llarr = '\u21C7',
  ll = '\u226A',
  Ll = '\u22D8',
  llcorner = '\u231E',
  Lleftarrow = '\u21DA',
  llhard = '\u296B',
  lltri = '\u25FA',
  Lmidot = '\u013F',
  lmidot = '\u0140',
  lmoustache = '\u23B0',
  lmoust = '\u23B0',
  lnap = '\u2A89',
  lnapprox = '\u2A89',
  lne = '\u2A87',
  lnE = '\u2268',
  lneq = '\u2A87',
  lneqq = '\u2268',
  lnsim = '\u22E6',
  loang = '\u27EC',
  loarr = '\u21FD',
  lobrk = '\u27E6',
  longleftarrow = '\u27F5',
  LongLeftArrow = '\u27F5',
  Longleftarrow = '\u27F8',
  longleftrightarrow = '\u27F7',
  LongLeftRightArrow = '\u27F7',
  Longleftrightarrow = '\u27FA',
  longmapsto = '\u27FC',
  longrightarrow = '\u27F6',
  LongRightArrow = '\u27F6',
  Longrightarrow = '\u27F9',
  looparrowleft = '\u21AB',
  looparrowright = '\u21AC',
  lopar = '\u2985',
  Lopf = '\u{1D543}',
  lopf = '\u{1D55D}',
  loplus = '\u2A2D',
  lotimes = '\u2A34',
  lowast = '\u2217',
  lowbar = '_',
  LowerLeftArrow = '\u2199',
  LowerRightArrow = '\u2198',
  loz = '\u25CA',
  lozenge = '\u25CA',
  lozf = '\u29EB',
  lpar = '(',
  lparlt = '\u2993',
  lrarr = '\u21C6',
  lrcorner = '\u231F',
  lrhar = '\u21CB',
  lrhard = '\u296D',
  lrm = '\u200E',
  lrtri = '\u22BF',
  lsaquo = '\u2039',
  lscr = '\u{1D4C1}',
  Lscr = '\u2112',
  lsh = '\u21B0',
  Lsh = '\u21B0',
  lsim = '\u2272',
  lsime = '\u2A8D',
  lsimg = '\u2A8F',
  lsqb = '[',
  lsquo = '\u2018',
  lsquor = '\u201A',
  Lstrok = '\u0141',
  lstrok = '\u0142',
  ltcc = '\u2AA6',
  ltcir = '\u2A79',
  lt = '<',
  LT = '<',
  Lt = '\u226A',
  ltdot = '\u22D6',
  lthree = '\u22CB',
  ltimes = '\u22C9',
  ltlarr = '\u2976',
  ltquest = '\u2A7B',
  ltri = '\u25C3',
  ltrie = '\u22B4',
  ltrif = '\u25C2',
  ltrPar = '\u2996',
  lurdshar = '\u294A',
  luruhar = '\u2966',
  lvertneqq = '\u2268\uFE00',
  lvnE = '\u2268\uFE00',
  macr = '\xAF',
  male = '\u2642',
  malt = '\u2720',
  maltese = '\u2720',
  map = '\u21A6',
  mapsto = '\u21A6',
  mapstodown = '\u21A7',
  mapstoleft = '\u21A4',
  mapstoup = '\u21A5',
  marker = '\u25AE',
  mcomma = '\u2A29',
  Mcy = '\u041C',
  mcy = '\u043C',
  mdash = '\u2014',
  mDDot = '\u223A',
  measuredangle = '\u2221',
  MediumSpace = '\u205F',
  Mellintrf = '\u2133',
  Mfr = '\u{1D510}',
  mfr = '\u{1D52A}',
  mho = '\u2127',
  micro = '\xB5',
  midast = '*',
  midcir = '\u2AF0',
  mid = '\u2223',
  middot = '\xB7',
  minusb = '\u229F',
  minus = '\u2212',
  minusd = '\u2238',
  minusdu = '\u2A2A',
  MinusPlus = '\u2213',
  mlcp = '\u2ADB',
  mldr = '\u2026',
  mnplus = '\u2213',
  models = '\u22A7',
  Mopf = '\u{1D544}',
  mopf = '\u{1D55E}',
  mp = '\u2213',
  mscr = '\u{1D4C2}',
  Mscr = '\u2133',
  mstpos = '\u223E',
  Mu = '\u039C',
  mu = '\u03BC',
  multimap = '\u22B8',
  mumap = '\u22B8',
  nabla = '\u2207',
  Nacute = '\u0143',
  nacute = '\u0144',
  nang = '\u2220\u20D2',
  nap = '\u2249',
  napE = '\u2A70\u0338',
  napid = '\u224B\u0338',
  napos = '\u0149',
  napprox = '\u2249',
  natural = '\u266E',
  naturals = '\u2115',
  natur = '\u266E',
  nbsp = '\xA0',
  nbump = '\u224E\u0338',
  nbumpe = '\u224F\u0338',
  ncap = '\u2A43',
  Ncaron = '\u0147',
  ncaron = '\u0148',
  Ncedil = '\u0145',
  ncedil = '\u0146',
  ncong = '\u2247',
  ncongdot = '\u2A6D\u0338',
  ncup = '\u2A42',
  Ncy = '\u041D',
  ncy = '\u043D',
  ndash = '\u2013',
  nearhk = '\u2924',
  nearr = '\u2197',
  neArr = '\u21D7',
  nearrow = '\u2197',
  ne = '\u2260',
  nedot = '\u2250\u0338',
  NegativeMediumSpace = '\u200B',
  NegativeThickSpace = '\u200B',
  NegativeThinSpace = '\u200B',
  NegativeVeryThinSpace = '\u200B',
  nequiv = '\u2262',
  nesear = '\u2928',
  nesim = '\u2242\u0338',
  NestedGreaterGreater = '\u226B',
  NestedLessLess = '\u226A',
  NewLine = `
`,
  nexist = '\u2204',
  nexists = '\u2204',
  Nfr = '\u{1D511}',
  nfr = '\u{1D52B}',
  ngE = '\u2267\u0338',
  nge = '\u2271',
  ngeq = '\u2271',
  ngeqq = '\u2267\u0338',
  ngeqslant = '\u2A7E\u0338',
  nges = '\u2A7E\u0338',
  nGg = '\u22D9\u0338',
  ngsim = '\u2275',
  nGt = '\u226B\u20D2',
  ngt = '\u226F',
  ngtr = '\u226F',
  nGtv = '\u226B\u0338',
  nharr = '\u21AE',
  nhArr = '\u21CE',
  nhpar = '\u2AF2',
  ni = '\u220B',
  nis = '\u22FC',
  nisd = '\u22FA',
  niv = '\u220B',
  NJcy = '\u040A',
  njcy = '\u045A',
  nlarr = '\u219A',
  nlArr = '\u21CD',
  nldr = '\u2025',
  nlE = '\u2266\u0338',
  nle = '\u2270',
  nleftarrow = '\u219A',
  nLeftarrow = '\u21CD',
  nleftrightarrow = '\u21AE',
  nLeftrightarrow = '\u21CE',
  nleq = '\u2270',
  nleqq = '\u2266\u0338',
  nleqslant = '\u2A7D\u0338',
  nles = '\u2A7D\u0338',
  nless = '\u226E',
  nLl = '\u22D8\u0338',
  nlsim = '\u2274',
  nLt = '\u226A\u20D2',
  nlt = '\u226E',
  nltri = '\u22EA',
  nltrie = '\u22EC',
  nLtv = '\u226A\u0338',
  nmid = '\u2224',
  NoBreak = '\u2060',
  NonBreakingSpace = '\xA0',
  nopf = '\u{1D55F}',
  Nopf = '\u2115',
  Not = '\u2AEC',
  not = '\xAC',
  NotCongruent = '\u2262',
  NotCupCap = '\u226D',
  NotDoubleVerticalBar = '\u2226',
  NotElement = '\u2209',
  NotEqual = '\u2260',
  NotEqualTilde = '\u2242\u0338',
  NotExists = '\u2204',
  NotGreater = '\u226F',
  NotGreaterEqual = '\u2271',
  NotGreaterFullEqual = '\u2267\u0338',
  NotGreaterGreater = '\u226B\u0338',
  NotGreaterLess = '\u2279',
  NotGreaterSlantEqual = '\u2A7E\u0338',
  NotGreaterTilde = '\u2275',
  NotHumpDownHump = '\u224E\u0338',
  NotHumpEqual = '\u224F\u0338',
  notin = '\u2209',
  notindot = '\u22F5\u0338',
  notinE = '\u22F9\u0338',
  notinva = '\u2209',
  notinvb = '\u22F7',
  notinvc = '\u22F6',
  NotLeftTriangleBar = '\u29CF\u0338',
  NotLeftTriangle = '\u22EA',
  NotLeftTriangleEqual = '\u22EC',
  NotLess = '\u226E',
  NotLessEqual = '\u2270',
  NotLessGreater = '\u2278',
  NotLessLess = '\u226A\u0338',
  NotLessSlantEqual = '\u2A7D\u0338',
  NotLessTilde = '\u2274',
  NotNestedGreaterGreater = '\u2AA2\u0338',
  NotNestedLessLess = '\u2AA1\u0338',
  notni = '\u220C',
  notniva = '\u220C',
  notnivb = '\u22FE',
  notnivc = '\u22FD',
  NotPrecedes = '\u2280',
  NotPrecedesEqual = '\u2AAF\u0338',
  NotPrecedesSlantEqual = '\u22E0',
  NotReverseElement = '\u220C',
  NotRightTriangleBar = '\u29D0\u0338',
  NotRightTriangle = '\u22EB',
  NotRightTriangleEqual = '\u22ED',
  NotSquareSubset = '\u228F\u0338',
  NotSquareSubsetEqual = '\u22E2',
  NotSquareSuperset = '\u2290\u0338',
  NotSquareSupersetEqual = '\u22E3',
  NotSubset = '\u2282\u20D2',
  NotSubsetEqual = '\u2288',
  NotSucceeds = '\u2281',
  NotSucceedsEqual = '\u2AB0\u0338',
  NotSucceedsSlantEqual = '\u22E1',
  NotSucceedsTilde = '\u227F\u0338',
  NotSuperset = '\u2283\u20D2',
  NotSupersetEqual = '\u2289',
  NotTilde = '\u2241',
  NotTildeEqual = '\u2244',
  NotTildeFullEqual = '\u2247',
  NotTildeTilde = '\u2249',
  NotVerticalBar = '\u2224',
  nparallel = '\u2226',
  npar = '\u2226',
  nparsl = '\u2AFD\u20E5',
  npart = '\u2202\u0338',
  npolint = '\u2A14',
  npr = '\u2280',
  nprcue = '\u22E0',
  nprec = '\u2280',
  npreceq = '\u2AAF\u0338',
  npre = '\u2AAF\u0338',
  nrarrc = '\u2933\u0338',
  nrarr = '\u219B',
  nrArr = '\u21CF',
  nrarrw = '\u219D\u0338',
  nrightarrow = '\u219B',
  nRightarrow = '\u21CF',
  nrtri = '\u22EB',
  nrtrie = '\u22ED',
  nsc = '\u2281',
  nsccue = '\u22E1',
  nsce = '\u2AB0\u0338',
  Nscr = '\u{1D4A9}',
  nscr = '\u{1D4C3}',
  nshortmid = '\u2224',
  nshortparallel = '\u2226',
  nsim = '\u2241',
  nsime = '\u2244',
  nsimeq = '\u2244',
  nsmid = '\u2224',
  nspar = '\u2226',
  nsqsube = '\u22E2',
  nsqsupe = '\u22E3',
  nsub = '\u2284',
  nsubE = '\u2AC5\u0338',
  nsube = '\u2288',
  nsubset = '\u2282\u20D2',
  nsubseteq = '\u2288',
  nsubseteqq = '\u2AC5\u0338',
  nsucc = '\u2281',
  nsucceq = '\u2AB0\u0338',
  nsup = '\u2285',
  nsupE = '\u2AC6\u0338',
  nsupe = '\u2289',
  nsupset = '\u2283\u20D2',
  nsupseteq = '\u2289',
  nsupseteqq = '\u2AC6\u0338',
  ntgl = '\u2279',
  Ntilde = '\xD1',
  ntilde = '\xF1',
  ntlg = '\u2278',
  ntriangleleft = '\u22EA',
  ntrianglelefteq = '\u22EC',
  ntriangleright = '\u22EB',
  ntrianglerighteq = '\u22ED',
  Nu = '\u039D',
  nu = '\u03BD',
  num = '#',
  numero = '\u2116',
  numsp = '\u2007',
  nvap = '\u224D\u20D2',
  nvdash = '\u22AC',
  nvDash = '\u22AD',
  nVdash = '\u22AE',
  nVDash = '\u22AF',
  nvge = '\u2265\u20D2',
  nvgt = '>\u20D2',
  nvHarr = '\u2904',
  nvinfin = '\u29DE',
  nvlArr = '\u2902',
  nvle = '\u2264\u20D2',
  nvlt = '<\u20D2',
  nvltrie = '\u22B4\u20D2',
  nvrArr = '\u2903',
  nvrtrie = '\u22B5\u20D2',
  nvsim = '\u223C\u20D2',
  nwarhk = '\u2923',
  nwarr = '\u2196',
  nwArr = '\u21D6',
  nwarrow = '\u2196',
  nwnear = '\u2927',
  Oacute = '\xD3',
  oacute = '\xF3',
  oast = '\u229B',
  Ocirc = '\xD4',
  ocirc = '\xF4',
  ocir = '\u229A',
  Ocy = '\u041E',
  ocy = '\u043E',
  odash = '\u229D',
  Odblac = '\u0150',
  odblac = '\u0151',
  odiv = '\u2A38',
  odot = '\u2299',
  odsold = '\u29BC',
  OElig = '\u0152',
  oelig = '\u0153',
  ofcir = '\u29BF',
  Ofr = '\u{1D512}',
  ofr = '\u{1D52C}',
  ogon = '\u02DB',
  Ograve = '\xD2',
  ograve = '\xF2',
  ogt = '\u29C1',
  ohbar = '\u29B5',
  ohm = '\u03A9',
  oint = '\u222E',
  olarr = '\u21BA',
  olcir = '\u29BE',
  olcross = '\u29BB',
  oline = '\u203E',
  olt = '\u29C0',
  Omacr = '\u014C',
  omacr = '\u014D',
  Omega = '\u03A9',
  omega = '\u03C9',
  Omicron = '\u039F',
  omicron = '\u03BF',
  omid = '\u29B6',
  ominus = '\u2296',
  Oopf = '\u{1D546}',
  oopf = '\u{1D560}',
  opar = '\u29B7',
  OpenCurlyDoubleQuote = '\u201C',
  OpenCurlyQuote = '\u2018',
  operp = '\u29B9',
  oplus = '\u2295',
  orarr = '\u21BB',
  Or = '\u2A54',
  or = '\u2228',
  ord = '\u2A5D',
  order = '\u2134',
  orderof = '\u2134',
  ordf = '\xAA',
  ordm = '\xBA',
  origof = '\u22B6',
  oror = '\u2A56',
  orslope = '\u2A57',
  orv = '\u2A5B',
  oS = '\u24C8',
  Oscr = '\u{1D4AA}',
  oscr = '\u2134',
  Oslash = '\xD8',
  oslash = '\xF8',
  osol = '\u2298',
  Otilde = '\xD5',
  otilde = '\xF5',
  otimesas = '\u2A36',
  Otimes = '\u2A37',
  otimes = '\u2297',
  Ouml = '\xD6',
  ouml = '\xF6',
  ovbar = '\u233D',
  OverBar = '\u203E',
  OverBrace = '\u23DE',
  OverBracket = '\u23B4',
  OverParenthesis = '\u23DC',
  para = '\xB6',
  parallel = '\u2225',
  par = '\u2225',
  parsim = '\u2AF3',
  parsl = '\u2AFD',
  part = '\u2202',
  PartialD = '\u2202',
  Pcy = '\u041F',
  pcy = '\u043F',
  percnt = '%',
  period = '.',
  permil = '\u2030',
  perp = '\u22A5',
  pertenk = '\u2031',
  Pfr = '\u{1D513}',
  pfr = '\u{1D52D}',
  Phi = '\u03A6',
  phi = '\u03C6',
  phiv = '\u03D5',
  phmmat = '\u2133',
  phone = '\u260E',
  Pi = '\u03A0',
  pi = '\u03C0',
  pitchfork = '\u22D4',
  piv = '\u03D6',
  planck = '\u210F',
  planckh = '\u210E',
  plankv = '\u210F',
  plusacir = '\u2A23',
  plusb = '\u229E',
  pluscir = '\u2A22',
  plus = '+',
  plusdo = '\u2214',
  plusdu = '\u2A25',
  pluse = '\u2A72',
  PlusMinus = '\xB1',
  plusmn = '\xB1',
  plussim = '\u2A26',
  plustwo = '\u2A27',
  pm = '\xB1',
  Poincareplane = '\u210C',
  pointint = '\u2A15',
  popf = '\u{1D561}',
  Popf = '\u2119',
  pound = '\xA3',
  prap = '\u2AB7',
  Pr = '\u2ABB',
  pr = '\u227A',
  prcue = '\u227C',
  precapprox = '\u2AB7',
  prec = '\u227A',
  preccurlyeq = '\u227C',
  Precedes = '\u227A',
  PrecedesEqual = '\u2AAF',
  PrecedesSlantEqual = '\u227C',
  PrecedesTilde = '\u227E',
  preceq = '\u2AAF',
  precnapprox = '\u2AB9',
  precneqq = '\u2AB5',
  precnsim = '\u22E8',
  pre = '\u2AAF',
  prE = '\u2AB3',
  precsim = '\u227E',
  prime = '\u2032',
  Prime = '\u2033',
  primes = '\u2119',
  prnap = '\u2AB9',
  prnE = '\u2AB5',
  prnsim = '\u22E8',
  prod = '\u220F',
  Product = '\u220F',
  profalar = '\u232E',
  profline = '\u2312',
  profsurf = '\u2313',
  prop = '\u221D',
  Proportional = '\u221D',
  Proportion = '\u2237',
  propto = '\u221D',
  prsim = '\u227E',
  prurel = '\u22B0',
  Pscr = '\u{1D4AB}',
  pscr = '\u{1D4C5}',
  Psi = '\u03A8',
  psi = '\u03C8',
  puncsp = '\u2008',
  Qfr = '\u{1D514}',
  qfr = '\u{1D52E}',
  qint = '\u2A0C',
  qopf = '\u{1D562}',
  Qopf = '\u211A',
  qprime = '\u2057',
  Qscr = '\u{1D4AC}',
  qscr = '\u{1D4C6}',
  quaternions = '\u210D',
  quatint = '\u2A16',
  quest = '?',
  questeq = '\u225F',
  quot = '"',
  QUOT = '"',
  rAarr = '\u21DB',
  race = '\u223D\u0331',
  Racute = '\u0154',
  racute = '\u0155',
  radic = '\u221A',
  raemptyv = '\u29B3',
  rang = '\u27E9',
  Rang = '\u27EB',
  rangd = '\u2992',
  range = '\u29A5',
  rangle = '\u27E9',
  raquo = '\xBB',
  rarrap = '\u2975',
  rarrb = '\u21E5',
  rarrbfs = '\u2920',
  rarrc = '\u2933',
  rarr = '\u2192',
  Rarr = '\u21A0',
  rArr = '\u21D2',
  rarrfs = '\u291E',
  rarrhk = '\u21AA',
  rarrlp = '\u21AC',
  rarrpl = '\u2945',
  rarrsim = '\u2974',
  Rarrtl = '\u2916',
  rarrtl = '\u21A3',
  rarrw = '\u219D',
  ratail = '\u291A',
  rAtail = '\u291C',
  ratio = '\u2236',
  rationals = '\u211A',
  rbarr = '\u290D',
  rBarr = '\u290F',
  RBarr = '\u2910',
  rbbrk = '\u2773',
  rbrace = '}',
  rbrack = ']',
  rbrke = '\u298C',
  rbrksld = '\u298E',
  rbrkslu = '\u2990',
  Rcaron = '\u0158',
  rcaron = '\u0159',
  Rcedil = '\u0156',
  rcedil = '\u0157',
  rceil = '\u2309',
  rcub = '}',
  Rcy = '\u0420',
  rcy = '\u0440',
  rdca = '\u2937',
  rdldhar = '\u2969',
  rdquo = '\u201D',
  rdquor = '\u201D',
  rdsh = '\u21B3',
  real = '\u211C',
  realine = '\u211B',
  realpart = '\u211C',
  reals = '\u211D',
  Re = '\u211C',
  rect = '\u25AD',
  reg = '\xAE',
  REG = '\xAE',
  ReverseElement = '\u220B',
  ReverseEquilibrium = '\u21CB',
  ReverseUpEquilibrium = '\u296F',
  rfisht = '\u297D',
  rfloor = '\u230B',
  rfr = '\u{1D52F}',
  Rfr = '\u211C',
  rHar = '\u2964',
  rhard = '\u21C1',
  rharu = '\u21C0',
  rharul = '\u296C',
  Rho = '\u03A1',
  rho = '\u03C1',
  rhov = '\u03F1',
  RightAngleBracket = '\u27E9',
  RightArrowBar = '\u21E5',
  rightarrow = '\u2192',
  RightArrow = '\u2192',
  Rightarrow = '\u21D2',
  RightArrowLeftArrow = '\u21C4',
  rightarrowtail = '\u21A3',
  RightCeiling = '\u2309',
  RightDoubleBracket = '\u27E7',
  RightDownTeeVector = '\u295D',
  RightDownVectorBar = '\u2955',
  RightDownVector = '\u21C2',
  RightFloor = '\u230B',
  rightharpoondown = '\u21C1',
  rightharpoonup = '\u21C0',
  rightleftarrows = '\u21C4',
  rightleftharpoons = '\u21CC',
  rightrightarrows = '\u21C9',
  rightsquigarrow = '\u219D',
  RightTeeArrow = '\u21A6',
  RightTee = '\u22A2',
  RightTeeVector = '\u295B',
  rightthreetimes = '\u22CC',
  RightTriangleBar = '\u29D0',
  RightTriangle = '\u22B3',
  RightTriangleEqual = '\u22B5',
  RightUpDownVector = '\u294F',
  RightUpTeeVector = '\u295C',
  RightUpVectorBar = '\u2954',
  RightUpVector = '\u21BE',
  RightVectorBar = '\u2953',
  RightVector = '\u21C0',
  ring = '\u02DA',
  risingdotseq = '\u2253',
  rlarr = '\u21C4',
  rlhar = '\u21CC',
  rlm = '\u200F',
  rmoustache = '\u23B1',
  rmoust = '\u23B1',
  rnmid = '\u2AEE',
  roang = '\u27ED',
  roarr = '\u21FE',
  robrk = '\u27E7',
  ropar = '\u2986',
  ropf = '\u{1D563}',
  Ropf = '\u211D',
  roplus = '\u2A2E',
  rotimes = '\u2A35',
  RoundImplies = '\u2970',
  rpar = ')',
  rpargt = '\u2994',
  rppolint = '\u2A12',
  rrarr = '\u21C9',
  Rrightarrow = '\u21DB',
  rsaquo = '\u203A',
  rscr = '\u{1D4C7}',
  Rscr = '\u211B',
  rsh = '\u21B1',
  Rsh = '\u21B1',
  rsqb = ']',
  rsquo = '\u2019',
  rsquor = '\u2019',
  rthree = '\u22CC',
  rtimes = '\u22CA',
  rtri = '\u25B9',
  rtrie = '\u22B5',
  rtrif = '\u25B8',
  rtriltri = '\u29CE',
  RuleDelayed = '\u29F4',
  ruluhar = '\u2968',
  rx = '\u211E',
  Sacute = '\u015A',
  sacute = '\u015B',
  sbquo = '\u201A',
  scap = '\u2AB8',
  Scaron = '\u0160',
  scaron = '\u0161',
  Sc = '\u2ABC',
  sc = '\u227B',
  sccue = '\u227D',
  sce = '\u2AB0',
  scE = '\u2AB4',
  Scedil = '\u015E',
  scedil = '\u015F',
  Scirc = '\u015C',
  scirc = '\u015D',
  scnap = '\u2ABA',
  scnE = '\u2AB6',
  scnsim = '\u22E9',
  scpolint = '\u2A13',
  scsim = '\u227F',
  Scy = '\u0421',
  scy = '\u0441',
  sdotb = '\u22A1',
  sdot = '\u22C5',
  sdote = '\u2A66',
  searhk = '\u2925',
  searr = '\u2198',
  seArr = '\u21D8',
  searrow = '\u2198',
  sect = '\xA7',
  semi = ';',
  seswar = '\u2929',
  setminus = '\u2216',
  setmn = '\u2216',
  sext = '\u2736',
  Sfr = '\u{1D516}',
  sfr = '\u{1D530}',
  sfrown = '\u2322',
  sharp = '\u266F',
  SHCHcy = '\u0429',
  shchcy = '\u0449',
  SHcy = '\u0428',
  shcy = '\u0448',
  ShortDownArrow = '\u2193',
  ShortLeftArrow = '\u2190',
  shortmid = '\u2223',
  shortparallel = '\u2225',
  ShortRightArrow = '\u2192',
  ShortUpArrow = '\u2191',
  shy = '\xAD',
  Sigma = '\u03A3',
  sigma = '\u03C3',
  sigmaf = '\u03C2',
  sigmav = '\u03C2',
  sim = '\u223C',
  simdot = '\u2A6A',
  sime = '\u2243',
  simeq = '\u2243',
  simg = '\u2A9E',
  simgE = '\u2AA0',
  siml = '\u2A9D',
  simlE = '\u2A9F',
  simne = '\u2246',
  simplus = '\u2A24',
  simrarr = '\u2972',
  slarr = '\u2190',
  SmallCircle = '\u2218',
  smallsetminus = '\u2216',
  smashp = '\u2A33',
  smeparsl = '\u29E4',
  smid = '\u2223',
  smile = '\u2323',
  smt = '\u2AAA',
  smte = '\u2AAC',
  smtes = '\u2AAC\uFE00',
  SOFTcy = '\u042C',
  softcy = '\u044C',
  solbar = '\u233F',
  solb = '\u29C4',
  sol = '/',
  Sopf = '\u{1D54A}',
  sopf = '\u{1D564}',
  spades = '\u2660',
  spadesuit = '\u2660',
  spar = '\u2225',
  sqcap = '\u2293',
  sqcaps = '\u2293\uFE00',
  sqcup = '\u2294',
  sqcups = '\u2294\uFE00',
  Sqrt = '\u221A',
  sqsub = '\u228F',
  sqsube = '\u2291',
  sqsubset = '\u228F',
  sqsubseteq = '\u2291',
  sqsup = '\u2290',
  sqsupe = '\u2292',
  sqsupset = '\u2290',
  sqsupseteq = '\u2292',
  square = '\u25A1',
  Square = '\u25A1',
  SquareIntersection = '\u2293',
  SquareSubset = '\u228F',
  SquareSubsetEqual = '\u2291',
  SquareSuperset = '\u2290',
  SquareSupersetEqual = '\u2292',
  SquareUnion = '\u2294',
  squarf = '\u25AA',
  squ = '\u25A1',
  squf = '\u25AA',
  srarr = '\u2192',
  Sscr = '\u{1D4AE}',
  sscr = '\u{1D4C8}',
  ssetmn = '\u2216',
  ssmile = '\u2323',
  sstarf = '\u22C6',
  Star = '\u22C6',
  star = '\u2606',
  starf = '\u2605',
  straightepsilon = '\u03F5',
  straightphi = '\u03D5',
  strns = '\xAF',
  sub = '\u2282',
  Sub = '\u22D0',
  subdot = '\u2ABD',
  subE = '\u2AC5',
  sube = '\u2286',
  subedot = '\u2AC3',
  submult = '\u2AC1',
  subnE = '\u2ACB',
  subne = '\u228A',
  subplus = '\u2ABF',
  subrarr = '\u2979',
  subset = '\u2282',
  Subset = '\u22D0',
  subseteq = '\u2286',
  subseteqq = '\u2AC5',
  SubsetEqual = '\u2286',
  subsetneq = '\u228A',
  subsetneqq = '\u2ACB',
  subsim = '\u2AC7',
  subsub = '\u2AD5',
  subsup = '\u2AD3',
  succapprox = '\u2AB8',
  succ = '\u227B',
  succcurlyeq = '\u227D',
  Succeeds = '\u227B',
  SucceedsEqual = '\u2AB0',
  SucceedsSlantEqual = '\u227D',
  SucceedsTilde = '\u227F',
  succeq = '\u2AB0',
  succnapprox = '\u2ABA',
  succneqq = '\u2AB6',
  succnsim = '\u22E9',
  succsim = '\u227F',
  SuchThat = '\u220B',
  sum = '\u2211',
  Sum = '\u2211',
  sung = '\u266A',
  sup1 = '\xB9',
  sup2 = '\xB2',
  sup3 = '\xB3',
  sup = '\u2283',
  Sup = '\u22D1',
  supdot = '\u2ABE',
  supdsub = '\u2AD8',
  supE = '\u2AC6',
  supe = '\u2287',
  supedot = '\u2AC4',
  Superset = '\u2283',
  SupersetEqual = '\u2287',
  suphsol = '\u27C9',
  suphsub = '\u2AD7',
  suplarr = '\u297B',
  supmult = '\u2AC2',
  supnE = '\u2ACC',
  supne = '\u228B',
  supplus = '\u2AC0',
  supset = '\u2283',
  Supset = '\u22D1',
  supseteq = '\u2287',
  supseteqq = '\u2AC6',
  supsetneq = '\u228B',
  supsetneqq = '\u2ACC',
  supsim = '\u2AC8',
  supsub = '\u2AD4',
  supsup = '\u2AD6',
  swarhk = '\u2926',
  swarr = '\u2199',
  swArr = '\u21D9',
  swarrow = '\u2199',
  swnwar = '\u292A',
  szlig = '\xDF',
  Tab = '	',
  target = '\u2316',
  Tau = '\u03A4',
  tau = '\u03C4',
  tbrk = '\u23B4',
  Tcaron = '\u0164',
  tcaron = '\u0165',
  Tcedil = '\u0162',
  tcedil = '\u0163',
  Tcy = '\u0422',
  tcy = '\u0442',
  tdot = '\u20DB',
  telrec = '\u2315',
  Tfr = '\u{1D517}',
  tfr = '\u{1D531}',
  there4 = '\u2234',
  therefore = '\u2234',
  Therefore = '\u2234',
  Theta = '\u0398',
  theta = '\u03B8',
  thetasym = '\u03D1',
  thetav = '\u03D1',
  thickapprox = '\u2248',
  thicksim = '\u223C',
  ThickSpace = '\u205F\u200A',
  ThinSpace = '\u2009',
  thinsp = '\u2009',
  thkap = '\u2248',
  thksim = '\u223C',
  THORN = '\xDE',
  thorn = '\xFE',
  tilde = '\u02DC',
  Tilde = '\u223C',
  TildeEqual = '\u2243',
  TildeFullEqual = '\u2245',
  TildeTilde = '\u2248',
  timesbar = '\u2A31',
  timesb = '\u22A0',
  times = '\xD7',
  timesd = '\u2A30',
  tint = '\u222D',
  toea = '\u2928',
  topbot = '\u2336',
  topcir = '\u2AF1',
  top = '\u22A4',
  Topf = '\u{1D54B}',
  topf = '\u{1D565}',
  topfork = '\u2ADA',
  tosa = '\u2929',
  tprime = '\u2034',
  trade = '\u2122',
  TRADE = '\u2122',
  triangle = '\u25B5',
  triangledown = '\u25BF',
  triangleleft = '\u25C3',
  trianglelefteq = '\u22B4',
  triangleq = '\u225C',
  triangleright = '\u25B9',
  trianglerighteq = '\u22B5',
  tridot = '\u25EC',
  trie = '\u225C',
  triminus = '\u2A3A',
  TripleDot = '\u20DB',
  triplus = '\u2A39',
  trisb = '\u29CD',
  tritime = '\u2A3B',
  trpezium = '\u23E2',
  Tscr = '\u{1D4AF}',
  tscr = '\u{1D4C9}',
  TScy = '\u0426',
  tscy = '\u0446',
  TSHcy = '\u040B',
  tshcy = '\u045B',
  Tstrok = '\u0166',
  tstrok = '\u0167',
  twixt = '\u226C',
  twoheadleftarrow = '\u219E',
  twoheadrightarrow = '\u21A0',
  Uacute = '\xDA',
  uacute = '\xFA',
  uarr = '\u2191',
  Uarr = '\u219F',
  uArr = '\u21D1',
  Uarrocir = '\u2949',
  Ubrcy = '\u040E',
  ubrcy = '\u045E',
  Ubreve = '\u016C',
  ubreve = '\u016D',
  Ucirc = '\xDB',
  ucirc = '\xFB',
  Ucy = '\u0423',
  ucy = '\u0443',
  udarr = '\u21C5',
  Udblac = '\u0170',
  udblac = '\u0171',
  udhar = '\u296E',
  ufisht = '\u297E',
  Ufr = '\u{1D518}',
  ufr = '\u{1D532}',
  Ugrave = '\xD9',
  ugrave = '\xF9',
  uHar = '\u2963',
  uharl = '\u21BF',
  uharr = '\u21BE',
  uhblk = '\u2580',
  ulcorn = '\u231C',
  ulcorner = '\u231C',
  ulcrop = '\u230F',
  ultri = '\u25F8',
  Umacr = '\u016A',
  umacr = '\u016B',
  uml = '\xA8',
  UnderBar = '_',
  UnderBrace = '\u23DF',
  UnderBracket = '\u23B5',
  UnderParenthesis = '\u23DD',
  Union = '\u22C3',
  UnionPlus = '\u228E',
  Uogon = '\u0172',
  uogon = '\u0173',
  Uopf = '\u{1D54C}',
  uopf = '\u{1D566}',
  UpArrowBar = '\u2912',
  uparrow = '\u2191',
  UpArrow = '\u2191',
  Uparrow = '\u21D1',
  UpArrowDownArrow = '\u21C5',
  updownarrow = '\u2195',
  UpDownArrow = '\u2195',
  Updownarrow = '\u21D5',
  UpEquilibrium = '\u296E',
  upharpoonleft = '\u21BF',
  upharpoonright = '\u21BE',
  uplus = '\u228E',
  UpperLeftArrow = '\u2196',
  UpperRightArrow = '\u2197',
  upsi = '\u03C5',
  Upsi = '\u03D2',
  upsih = '\u03D2',
  Upsilon = '\u03A5',
  upsilon = '\u03C5',
  UpTeeArrow = '\u21A5',
  UpTee = '\u22A5',
  upuparrows = '\u21C8',
  urcorn = '\u231D',
  urcorner = '\u231D',
  urcrop = '\u230E',
  Uring = '\u016E',
  uring = '\u016F',
  urtri = '\u25F9',
  Uscr = '\u{1D4B0}',
  uscr = '\u{1D4CA}',
  utdot = '\u22F0',
  Utilde = '\u0168',
  utilde = '\u0169',
  utri = '\u25B5',
  utrif = '\u25B4',
  uuarr = '\u21C8',
  Uuml = '\xDC',
  uuml = '\xFC',
  uwangle = '\u29A7',
  vangrt = '\u299C',
  varepsilon = '\u03F5',
  varkappa = '\u03F0',
  varnothing = '\u2205',
  varphi = '\u03D5',
  varpi = '\u03D6',
  varpropto = '\u221D',
  varr = '\u2195',
  vArr = '\u21D5',
  varrho = '\u03F1',
  varsigma = '\u03C2',
  varsubsetneq = '\u228A\uFE00',
  varsubsetneqq = '\u2ACB\uFE00',
  varsupsetneq = '\u228B\uFE00',
  varsupsetneqq = '\u2ACC\uFE00',
  vartheta = '\u03D1',
  vartriangleleft = '\u22B2',
  vartriangleright = '\u22B3',
  vBar = '\u2AE8',
  Vbar = '\u2AEB',
  vBarv = '\u2AE9',
  Vcy = '\u0412',
  vcy = '\u0432',
  vdash = '\u22A2',
  vDash = '\u22A8',
  Vdash = '\u22A9',
  VDash = '\u22AB',
  Vdashl = '\u2AE6',
  veebar = '\u22BB',
  vee = '\u2228',
  Vee = '\u22C1',
  veeeq = '\u225A',
  vellip = '\u22EE',
  verbar = '|',
  Verbar = '\u2016',
  vert = '|',
  Vert = '\u2016',
  VerticalBar = '\u2223',
  VerticalLine = '|',
  VerticalSeparator = '\u2758',
  VerticalTilde = '\u2240',
  VeryThinSpace = '\u200A',
  Vfr = '\u{1D519}',
  vfr = '\u{1D533}',
  vltri = '\u22B2',
  vnsub = '\u2282\u20D2',
  vnsup = '\u2283\u20D2',
  Vopf = '\u{1D54D}',
  vopf = '\u{1D567}',
  vprop = '\u221D',
  vrtri = '\u22B3',
  Vscr = '\u{1D4B1}',
  vscr = '\u{1D4CB}',
  vsubnE = '\u2ACB\uFE00',
  vsubne = '\u228A\uFE00',
  vsupnE = '\u2ACC\uFE00',
  vsupne = '\u228B\uFE00',
  Vvdash = '\u22AA',
  vzigzag = '\u299A',
  Wcirc = '\u0174',
  wcirc = '\u0175',
  wedbar = '\u2A5F',
  wedge = '\u2227',
  Wedge = '\u22C0',
  wedgeq = '\u2259',
  weierp = '\u2118',
  Wfr = '\u{1D51A}',
  wfr = '\u{1D534}',
  Wopf = '\u{1D54E}',
  wopf = '\u{1D568}',
  wp = '\u2118',
  wr = '\u2240',
  wreath = '\u2240',
  Wscr = '\u{1D4B2}',
  wscr = '\u{1D4CC}',
  xcap = '\u22C2',
  xcirc = '\u25EF',
  xcup = '\u22C3',
  xdtri = '\u25BD',
  Xfr = '\u{1D51B}',
  xfr = '\u{1D535}',
  xharr = '\u27F7',
  xhArr = '\u27FA',
  Xi = '\u039E',
  xi = '\u03BE',
  xlarr = '\u27F5',
  xlArr = '\u27F8',
  xmap = '\u27FC',
  xnis = '\u22FB',
  xodot = '\u2A00',
  Xopf = '\u{1D54F}',
  xopf = '\u{1D569}',
  xoplus = '\u2A01',
  xotime = '\u2A02',
  xrarr = '\u27F6',
  xrArr = '\u27F9',
  Xscr = '\u{1D4B3}',
  xscr = '\u{1D4CD}',
  xsqcup = '\u2A06',
  xuplus = '\u2A04',
  xutri = '\u25B3',
  xvee = '\u22C1',
  xwedge = '\u22C0',
  Yacute = '\xDD',
  yacute = '\xFD',
  YAcy = '\u042F',
  yacy = '\u044F',
  Ycirc = '\u0176',
  ycirc = '\u0177',
  Ycy = '\u042B',
  ycy = '\u044B',
  yen = '\xA5',
  Yfr = '\u{1D51C}',
  yfr = '\u{1D536}',
  YIcy = '\u0407',
  yicy = '\u0457',
  Yopf = '\u{1D550}',
  yopf = '\u{1D56A}',
  Yscr = '\u{1D4B4}',
  yscr = '\u{1D4CE}',
  YUcy = '\u042E',
  yucy = '\u044E',
  yuml = '\xFF',
  Yuml = '\u0178',
  Zacute = '\u0179',
  zacute = '\u017A',
  Zcaron = '\u017D',
  zcaron = '\u017E',
  Zcy = '\u0417',
  zcy = '\u0437',
  Zdot = '\u017B',
  zdot = '\u017C',
  zeetrf = '\u2128',
  ZeroWidthSpace = '\u200B',
  Zeta = '\u0396',
  zeta = '\u03B6',
  zfr = '\u{1D537}',
  Zfr = '\u2128',
  ZHcy = '\u0416',
  zhcy = '\u0436',
  zigrarr = '\u21DD',
  zopf = '\u{1D56B}',
  Zopf = '\u2124',
  Zscr = '\u{1D4B5}',
  zscr = '\u{1D4CF}',
  zwj = '\u200D',
  zwnj = '\u200C',
  entities$1 = {
    Aacute,
    aacute,
    Abreve,
    abreve,
    ac,
    acd,
    acE,
    Acirc,
    acirc,
    acute,
    Acy,
    acy,
    AElig,
    aelig,
    af,
    Afr,
    afr,
    Agrave,
    agrave,
    alefsym,
    aleph,
    Alpha,
    alpha,
    Amacr,
    amacr,
    amalg,
    amp,
    AMP,
    andand,
    And,
    and,
    andd,
    andslope,
    andv,
    ang,
    ange,
    angle,
    angmsdaa,
    angmsdab,
    angmsdac,
    angmsdad,
    angmsdae,
    angmsdaf,
    angmsdag,
    angmsdah,
    angmsd,
    angrt,
    angrtvb,
    angrtvbd,
    angsph,
    angst,
    angzarr,
    Aogon,
    aogon,
    Aopf,
    aopf,
    apacir,
    ap,
    apE,
    ape,
    apid,
    apos,
    ApplyFunction,
    approx,
    approxeq,
    Aring,
    aring,
    Ascr,
    ascr,
    Assign,
    ast,
    asymp,
    asympeq,
    Atilde,
    atilde,
    Auml,
    auml,
    awconint,
    awint,
    backcong,
    backepsilon,
    backprime,
    backsim,
    backsimeq,
    Backslash,
    Barv,
    barvee,
    barwed,
    Barwed,
    barwedge,
    bbrk,
    bbrktbrk,
    bcong,
    Bcy,
    bcy,
    bdquo,
    becaus,
    because,
    Because,
    bemptyv,
    bepsi,
    bernou,
    Bernoullis,
    Beta,
    beta,
    beth,
    between,
    Bfr,
    bfr,
    bigcap,
    bigcirc,
    bigcup,
    bigodot,
    bigoplus,
    bigotimes,
    bigsqcup,
    bigstar,
    bigtriangledown,
    bigtriangleup,
    biguplus,
    bigvee,
    bigwedge,
    bkarow,
    blacklozenge,
    blacksquare,
    blacktriangle,
    blacktriangledown,
    blacktriangleleft,
    blacktriangleright,
    blank,
    blk12,
    blk14,
    blk34,
    block,
    bne,
    bnequiv,
    bNot,
    bnot,
    Bopf,
    bopf,
    bot,
    bottom,
    bowtie,
    boxbox,
    boxdl,
    boxdL,
    boxDl,
    boxDL,
    boxdr,
    boxdR,
    boxDr,
    boxDR,
    boxh,
    boxH,
    boxhd,
    boxHd,
    boxhD,
    boxHD,
    boxhu,
    boxHu,
    boxhU,
    boxHU,
    boxminus,
    boxplus,
    boxtimes,
    boxul,
    boxuL,
    boxUl,
    boxUL,
    boxur,
    boxuR,
    boxUr,
    boxUR,
    boxv,
    boxV,
    boxvh,
    boxvH,
    boxVh,
    boxVH,
    boxvl,
    boxvL,
    boxVl,
    boxVL,
    boxvr,
    boxvR,
    boxVr,
    boxVR,
    bprime,
    breve,
    Breve,
    brvbar,
    bscr,
    Bscr,
    bsemi,
    bsim,
    bsime,
    bsolb,
    bsol,
    bsolhsub,
    bull,
    bullet,
    bump,
    bumpE,
    bumpe,
    Bumpeq,
    bumpeq,
    Cacute,
    cacute,
    capand,
    capbrcup,
    capcap,
    cap,
    Cap,
    capcup,
    capdot,
    CapitalDifferentialD,
    caps,
    caret,
    caron,
    Cayleys,
    ccaps,
    Ccaron,
    ccaron,
    Ccedil,
    ccedil,
    Ccirc,
    ccirc,
    Cconint,
    ccups,
    ccupssm,
    Cdot,
    cdot,
    cedil,
    Cedilla,
    cemptyv,
    cent,
    centerdot,
    CenterDot,
    cfr,
    Cfr,
    CHcy,
    chcy,
    check,
    checkmark,
    Chi,
    chi,
    circ,
    circeq,
    circlearrowleft,
    circlearrowright,
    circledast,
    circledcirc,
    circleddash,
    CircleDot,
    circledR,
    circledS,
    CircleMinus,
    CirclePlus,
    CircleTimes,
    cir,
    cirE,
    cire,
    cirfnint,
    cirmid,
    cirscir,
    ClockwiseContourIntegral,
    CloseCurlyDoubleQuote,
    CloseCurlyQuote,
    clubs,
    clubsuit,
    colon,
    Colon,
    Colone,
    colone,
    coloneq,
    comma,
    commat,
    comp,
    compfn,
    complement,
    complexes,
    cong,
    congdot,
    Congruent,
    conint,
    Conint,
    ContourIntegral,
    copf,
    Copf,
    coprod,
    Coproduct,
    copy,
    COPY,
    copysr,
    CounterClockwiseContourIntegral,
    crarr,
    cross,
    Cross,
    Cscr,
    cscr,
    csub,
    csube,
    csup,
    csupe,
    ctdot,
    cudarrl,
    cudarrr,
    cuepr,
    cuesc,
    cularr,
    cularrp,
    cupbrcap,
    cupcap,
    CupCap,
    cup,
    Cup,
    cupcup,
    cupdot,
    cupor,
    cups,
    curarr,
    curarrm,
    curlyeqprec,
    curlyeqsucc,
    curlyvee,
    curlywedge,
    curren,
    curvearrowleft,
    curvearrowright,
    cuvee,
    cuwed,
    cwconint,
    cwint,
    cylcty,
    dagger,
    Dagger,
    daleth,
    darr,
    Darr,
    dArr,
    dash,
    Dashv,
    dashv,
    dbkarow,
    dblac,
    Dcaron,
    dcaron,
    Dcy,
    dcy,
    ddagger,
    ddarr,
    DD,
    dd,
    DDotrahd,
    ddotseq,
    deg,
    Del,
    Delta,
    delta,
    demptyv,
    dfisht,
    Dfr,
    dfr,
    dHar,
    dharl,
    dharr,
    DiacriticalAcute,
    DiacriticalDot,
    DiacriticalDoubleAcute,
    DiacriticalGrave,
    DiacriticalTilde,
    diam,
    diamond,
    Diamond,
    diamondsuit,
    diams,
    die,
    DifferentialD,
    digamma,
    disin,
    div,
    divide,
    divideontimes,
    divonx,
    DJcy,
    djcy,
    dlcorn,
    dlcrop,
    dollar,
    Dopf,
    dopf,
    Dot,
    dot,
    DotDot,
    doteq,
    doteqdot,
    DotEqual,
    dotminus,
    dotplus,
    dotsquare,
    doublebarwedge,
    DoubleContourIntegral,
    DoubleDot,
    DoubleDownArrow,
    DoubleLeftArrow,
    DoubleLeftRightArrow,
    DoubleLeftTee,
    DoubleLongLeftArrow,
    DoubleLongLeftRightArrow,
    DoubleLongRightArrow,
    DoubleRightArrow,
    DoubleRightTee,
    DoubleUpArrow,
    DoubleUpDownArrow,
    DoubleVerticalBar,
    DownArrowBar,
    downarrow,
    DownArrow,
    Downarrow,
    DownArrowUpArrow,
    DownBreve,
    downdownarrows,
    downharpoonleft,
    downharpoonright,
    DownLeftRightVector,
    DownLeftTeeVector,
    DownLeftVectorBar,
    DownLeftVector,
    DownRightTeeVector,
    DownRightVectorBar,
    DownRightVector,
    DownTeeArrow,
    DownTee,
    drbkarow,
    drcorn,
    drcrop,
    Dscr,
    dscr,
    DScy,
    dscy,
    dsol,
    Dstrok,
    dstrok,
    dtdot,
    dtri,
    dtrif,
    duarr,
    duhar,
    dwangle,
    DZcy,
    dzcy,
    dzigrarr,
    Eacute,
    eacute,
    easter,
    Ecaron,
    ecaron,
    Ecirc,
    ecirc,
    ecir,
    ecolon,
    Ecy,
    ecy,
    eDDot,
    Edot,
    edot,
    eDot,
    ee,
    efDot,
    Efr,
    efr,
    eg,
    Egrave,
    egrave,
    egs,
    egsdot,
    el,
    Element,
    elinters,
    ell,
    els,
    elsdot,
    Emacr,
    emacr,
    empty,
    emptyset,
    EmptySmallSquare,
    emptyv,
    EmptyVerySmallSquare,
    emsp13,
    emsp14,
    emsp,
    ENG,
    eng,
    ensp,
    Eogon,
    eogon,
    Eopf,
    eopf,
    epar,
    eparsl,
    eplus,
    epsi,
    Epsilon,
    epsilon,
    epsiv,
    eqcirc,
    eqcolon,
    eqsim,
    eqslantgtr,
    eqslantless,
    Equal,
    equals,
    EqualTilde,
    equest,
    Equilibrium,
    equiv,
    equivDD,
    eqvparsl,
    erarr,
    erDot,
    escr,
    Escr,
    esdot,
    Esim,
    esim,
    Eta,
    eta,
    ETH,
    eth,
    Euml,
    euml,
    euro,
    excl,
    exist,
    Exists,
    expectation,
    exponentiale,
    ExponentialE,
    fallingdotseq,
    Fcy,
    fcy,
    female,
    ffilig,
    fflig,
    ffllig,
    Ffr,
    ffr,
    filig,
    FilledSmallSquare,
    FilledVerySmallSquare,
    fjlig,
    flat,
    fllig,
    fltns,
    fnof,
    Fopf,
    fopf,
    forall,
    ForAll,
    fork,
    forkv,
    Fouriertrf,
    fpartint,
    frac12,
    frac13,
    frac14,
    frac15,
    frac16,
    frac18,
    frac23,
    frac25,
    frac34,
    frac35,
    frac38,
    frac45,
    frac56,
    frac58,
    frac78,
    frasl,
    frown,
    fscr,
    Fscr,
    gacute,
    Gamma,
    gamma,
    Gammad,
    gammad,
    gap,
    Gbreve,
    gbreve,
    Gcedil,
    Gcirc,
    gcirc,
    Gcy,
    gcy,
    Gdot,
    gdot,
    ge,
    gE,
    gEl,
    gel,
    geq,
    geqq,
    geqslant,
    gescc,
    ges,
    gesdot,
    gesdoto,
    gesdotol,
    gesl,
    gesles,
    Gfr,
    gfr,
    gg,
    Gg,
    ggg,
    gimel,
    GJcy,
    gjcy,
    gla,
    gl,
    glE,
    glj,
    gnap,
    gnapprox,
    gne,
    gnE,
    gneq,
    gneqq,
    gnsim,
    Gopf,
    gopf,
    grave,
    GreaterEqual,
    GreaterEqualLess,
    GreaterFullEqual,
    GreaterGreater,
    GreaterLess,
    GreaterSlantEqual,
    GreaterTilde,
    Gscr,
    gscr,
    gsim,
    gsime,
    gsiml,
    gtcc,
    gtcir,
    gt,
    GT,
    Gt,
    gtdot,
    gtlPar,
    gtquest,
    gtrapprox,
    gtrarr,
    gtrdot,
    gtreqless,
    gtreqqless,
    gtrless,
    gtrsim,
    gvertneqq,
    gvnE,
    Hacek,
    hairsp,
    half,
    hamilt,
    HARDcy,
    hardcy,
    harrcir,
    harr,
    hArr,
    harrw,
    Hat,
    hbar,
    Hcirc,
    hcirc,
    hearts,
    heartsuit,
    hellip,
    hercon,
    hfr,
    Hfr,
    HilbertSpace,
    hksearow,
    hkswarow,
    hoarr,
    homtht,
    hookleftarrow,
    hookrightarrow,
    hopf,
    Hopf,
    horbar,
    HorizontalLine,
    hscr,
    Hscr,
    hslash,
    Hstrok,
    hstrok,
    HumpDownHump,
    HumpEqual,
    hybull,
    hyphen,
    Iacute,
    iacute,
    ic,
    Icirc,
    icirc,
    Icy,
    icy,
    Idot,
    IEcy,
    iecy,
    iexcl,
    iff,
    ifr,
    Ifr,
    Igrave,
    igrave,
    ii,
    iiiint,
    iiint,
    iinfin,
    iiota,
    IJlig,
    ijlig,
    Imacr,
    imacr,
    image,
    ImaginaryI,
    imagline,
    imagpart,
    imath,
    Im,
    imof,
    imped,
    Implies,
    incare,
    in: '\u2208',
    infin,
    infintie,
    inodot,
    intcal,
    int,
    Int,
    integers,
    Integral,
    intercal,
    Intersection,
    intlarhk,
    intprod,
    InvisibleComma,
    InvisibleTimes,
    IOcy,
    iocy,
    Iogon,
    iogon,
    Iopf,
    iopf,
    Iota,
    iota,
    iprod,
    iquest,
    iscr,
    Iscr,
    isin,
    isindot,
    isinE,
    isins,
    isinsv,
    isinv,
    it,
    Itilde,
    itilde,
    Iukcy,
    iukcy,
    Iuml,
    iuml,
    Jcirc,
    jcirc,
    Jcy,
    jcy,
    Jfr,
    jfr,
    jmath,
    Jopf,
    jopf,
    Jscr,
    jscr,
    Jsercy,
    jsercy,
    Jukcy,
    jukcy,
    Kappa,
    kappa,
    kappav,
    Kcedil,
    kcedil,
    Kcy,
    kcy,
    Kfr,
    kfr,
    kgreen,
    KHcy,
    khcy,
    KJcy,
    kjcy,
    Kopf,
    kopf,
    Kscr,
    kscr,
    lAarr,
    Lacute,
    lacute,
    laemptyv,
    lagran,
    Lambda,
    lambda,
    lang,
    Lang,
    langd,
    langle,
    lap,
    Laplacetrf,
    laquo,
    larrb,
    larrbfs,
    larr,
    Larr,
    lArr,
    larrfs,
    larrhk,
    larrlp,
    larrpl,
    larrsim,
    larrtl,
    latail,
    lAtail,
    lat,
    late,
    lates,
    lbarr,
    lBarr,
    lbbrk,
    lbrace,
    lbrack,
    lbrke,
    lbrksld,
    lbrkslu,
    Lcaron,
    lcaron,
    Lcedil,
    lcedil,
    lceil,
    lcub,
    Lcy,
    lcy,
    ldca,
    ldquo,
    ldquor,
    ldrdhar,
    ldrushar,
    ldsh,
    le,
    lE,
    LeftAngleBracket,
    LeftArrowBar,
    leftarrow,
    LeftArrow,
    Leftarrow,
    LeftArrowRightArrow,
    leftarrowtail,
    LeftCeiling,
    LeftDoubleBracket,
    LeftDownTeeVector,
    LeftDownVectorBar,
    LeftDownVector,
    LeftFloor,
    leftharpoondown,
    leftharpoonup,
    leftleftarrows,
    leftrightarrow,
    LeftRightArrow,
    Leftrightarrow,
    leftrightarrows,
    leftrightharpoons,
    leftrightsquigarrow,
    LeftRightVector,
    LeftTeeArrow,
    LeftTee,
    LeftTeeVector,
    leftthreetimes,
    LeftTriangleBar,
    LeftTriangle,
    LeftTriangleEqual,
    LeftUpDownVector,
    LeftUpTeeVector,
    LeftUpVectorBar,
    LeftUpVector,
    LeftVectorBar,
    LeftVector,
    lEg,
    leg,
    leq,
    leqq,
    leqslant,
    lescc,
    les,
    lesdot,
    lesdoto,
    lesdotor,
    lesg,
    lesges,
    lessapprox,
    lessdot,
    lesseqgtr,
    lesseqqgtr,
    LessEqualGreater,
    LessFullEqual,
    LessGreater,
    lessgtr,
    LessLess,
    lesssim,
    LessSlantEqual,
    LessTilde,
    lfisht,
    lfloor,
    Lfr,
    lfr,
    lg,
    lgE,
    lHar,
    lhard,
    lharu,
    lharul,
    lhblk,
    LJcy,
    ljcy,
    llarr,
    ll,
    Ll,
    llcorner,
    Lleftarrow,
    llhard,
    lltri,
    Lmidot,
    lmidot,
    lmoustache,
    lmoust,
    lnap,
    lnapprox,
    lne,
    lnE,
    lneq,
    lneqq,
    lnsim,
    loang,
    loarr,
    lobrk,
    longleftarrow,
    LongLeftArrow,
    Longleftarrow,
    longleftrightarrow,
    LongLeftRightArrow,
    Longleftrightarrow,
    longmapsto,
    longrightarrow,
    LongRightArrow,
    Longrightarrow,
    looparrowleft,
    looparrowright,
    lopar,
    Lopf,
    lopf,
    loplus,
    lotimes,
    lowast,
    lowbar,
    LowerLeftArrow,
    LowerRightArrow,
    loz,
    lozenge,
    lozf,
    lpar,
    lparlt,
    lrarr,
    lrcorner,
    lrhar,
    lrhard,
    lrm,
    lrtri,
    lsaquo,
    lscr,
    Lscr,
    lsh,
    Lsh,
    lsim,
    lsime,
    lsimg,
    lsqb,
    lsquo,
    lsquor,
    Lstrok,
    lstrok,
    ltcc,
    ltcir,
    lt,
    LT,
    Lt,
    ltdot,
    lthree,
    ltimes,
    ltlarr,
    ltquest,
    ltri,
    ltrie,
    ltrif,
    ltrPar,
    lurdshar,
    luruhar,
    lvertneqq,
    lvnE,
    macr,
    male,
    malt,
    maltese,
    Map: '\u2905',
    map,
    mapsto,
    mapstodown,
    mapstoleft,
    mapstoup,
    marker,
    mcomma,
    Mcy,
    mcy,
    mdash,
    mDDot,
    measuredangle,
    MediumSpace,
    Mellintrf,
    Mfr,
    mfr,
    mho,
    micro,
    midast,
    midcir,
    mid,
    middot,
    minusb,
    minus,
    minusd,
    minusdu,
    MinusPlus,
    mlcp,
    mldr,
    mnplus,
    models,
    Mopf,
    mopf,
    mp,
    mscr,
    Mscr,
    mstpos,
    Mu,
    mu,
    multimap,
    mumap,
    nabla,
    Nacute,
    nacute,
    nang,
    nap,
    napE,
    napid,
    napos,
    napprox,
    natural,
    naturals,
    natur,
    nbsp,
    nbump,
    nbumpe,
    ncap,
    Ncaron,
    ncaron,
    Ncedil,
    ncedil,
    ncong,
    ncongdot,
    ncup,
    Ncy,
    ncy,
    ndash,
    nearhk,
    nearr,
    neArr,
    nearrow,
    ne,
    nedot,
    NegativeMediumSpace,
    NegativeThickSpace,
    NegativeThinSpace,
    NegativeVeryThinSpace,
    nequiv,
    nesear,
    nesim,
    NestedGreaterGreater,
    NestedLessLess,
    NewLine,
    nexist,
    nexists,
    Nfr,
    nfr,
    ngE,
    nge,
    ngeq,
    ngeqq,
    ngeqslant,
    nges,
    nGg,
    ngsim,
    nGt,
    ngt,
    ngtr,
    nGtv,
    nharr,
    nhArr,
    nhpar,
    ni,
    nis,
    nisd,
    niv,
    NJcy,
    njcy,
    nlarr,
    nlArr,
    nldr,
    nlE,
    nle,
    nleftarrow,
    nLeftarrow,
    nleftrightarrow,
    nLeftrightarrow,
    nleq,
    nleqq,
    nleqslant,
    nles,
    nless,
    nLl,
    nlsim,
    nLt,
    nlt,
    nltri,
    nltrie,
    nLtv,
    nmid,
    NoBreak,
    NonBreakingSpace,
    nopf,
    Nopf,
    Not,
    not,
    NotCongruent,
    NotCupCap,
    NotDoubleVerticalBar,
    NotElement,
    NotEqual,
    NotEqualTilde,
    NotExists,
    NotGreater,
    NotGreaterEqual,
    NotGreaterFullEqual,
    NotGreaterGreater,
    NotGreaterLess,
    NotGreaterSlantEqual,
    NotGreaterTilde,
    NotHumpDownHump,
    NotHumpEqual,
    notin,
    notindot,
    notinE,
    notinva,
    notinvb,
    notinvc,
    NotLeftTriangleBar,
    NotLeftTriangle,
    NotLeftTriangleEqual,
    NotLess,
    NotLessEqual,
    NotLessGreater,
    NotLessLess,
    NotLessSlantEqual,
    NotLessTilde,
    NotNestedGreaterGreater,
    NotNestedLessLess,
    notni,
    notniva,
    notnivb,
    notnivc,
    NotPrecedes,
    NotPrecedesEqual,
    NotPrecedesSlantEqual,
    NotReverseElement,
    NotRightTriangleBar,
    NotRightTriangle,
    NotRightTriangleEqual,
    NotSquareSubset,
    NotSquareSubsetEqual,
    NotSquareSuperset,
    NotSquareSupersetEqual,
    NotSubset,
    NotSubsetEqual,
    NotSucceeds,
    NotSucceedsEqual,
    NotSucceedsSlantEqual,
    NotSucceedsTilde,
    NotSuperset,
    NotSupersetEqual,
    NotTilde,
    NotTildeEqual,
    NotTildeFullEqual,
    NotTildeTilde,
    NotVerticalBar,
    nparallel,
    npar,
    nparsl,
    npart,
    npolint,
    npr,
    nprcue,
    nprec,
    npreceq,
    npre,
    nrarrc,
    nrarr,
    nrArr,
    nrarrw,
    nrightarrow,
    nRightarrow,
    nrtri,
    nrtrie,
    nsc,
    nsccue,
    nsce,
    Nscr,
    nscr,
    nshortmid,
    nshortparallel,
    nsim,
    nsime,
    nsimeq,
    nsmid,
    nspar,
    nsqsube,
    nsqsupe,
    nsub,
    nsubE,
    nsube,
    nsubset,
    nsubseteq,
    nsubseteqq,
    nsucc,
    nsucceq,
    nsup,
    nsupE,
    nsupe,
    nsupset,
    nsupseteq,
    nsupseteqq,
    ntgl,
    Ntilde,
    ntilde,
    ntlg,
    ntriangleleft,
    ntrianglelefteq,
    ntriangleright,
    ntrianglerighteq,
    Nu,
    nu,
    num,
    numero,
    numsp,
    nvap,
    nvdash,
    nvDash,
    nVdash,
    nVDash,
    nvge,
    nvgt,
    nvHarr,
    nvinfin,
    nvlArr,
    nvle,
    nvlt,
    nvltrie,
    nvrArr,
    nvrtrie,
    nvsim,
    nwarhk,
    nwarr,
    nwArr,
    nwarrow,
    nwnear,
    Oacute,
    oacute,
    oast,
    Ocirc,
    ocirc,
    ocir,
    Ocy,
    ocy,
    odash,
    Odblac,
    odblac,
    odiv,
    odot,
    odsold,
    OElig,
    oelig,
    ofcir,
    Ofr,
    ofr,
    ogon,
    Ograve,
    ograve,
    ogt,
    ohbar,
    ohm,
    oint,
    olarr,
    olcir,
    olcross,
    oline,
    olt,
    Omacr,
    omacr,
    Omega,
    omega,
    Omicron,
    omicron,
    omid,
    ominus,
    Oopf,
    oopf,
    opar,
    OpenCurlyDoubleQuote,
    OpenCurlyQuote,
    operp,
    oplus,
    orarr,
    Or,
    or,
    ord,
    order,
    orderof,
    ordf,
    ordm,
    origof,
    oror,
    orslope,
    orv,
    oS,
    Oscr,
    oscr,
    Oslash,
    oslash,
    osol,
    Otilde,
    otilde,
    otimesas,
    Otimes,
    otimes,
    Ouml,
    ouml,
    ovbar,
    OverBar,
    OverBrace,
    OverBracket,
    OverParenthesis,
    para,
    parallel,
    par,
    parsim,
    parsl,
    part,
    PartialD,
    Pcy,
    pcy,
    percnt,
    period,
    permil,
    perp,
    pertenk,
    Pfr,
    pfr,
    Phi,
    phi,
    phiv,
    phmmat,
    phone,
    Pi,
    pi,
    pitchfork,
    piv,
    planck,
    planckh,
    plankv,
    plusacir,
    plusb,
    pluscir,
    plus,
    plusdo,
    plusdu,
    pluse,
    PlusMinus,
    plusmn,
    plussim,
    plustwo,
    pm,
    Poincareplane,
    pointint,
    popf,
    Popf,
    pound,
    prap,
    Pr,
    pr,
    prcue,
    precapprox,
    prec,
    preccurlyeq,
    Precedes,
    PrecedesEqual,
    PrecedesSlantEqual,
    PrecedesTilde,
    preceq,
    precnapprox,
    precneqq,
    precnsim,
    pre,
    prE,
    precsim,
    prime,
    Prime,
    primes,
    prnap,
    prnE,
    prnsim,
    prod,
    Product,
    profalar,
    profline,
    profsurf,
    prop,
    Proportional,
    Proportion,
    propto,
    prsim,
    prurel,
    Pscr,
    pscr,
    Psi,
    psi,
    puncsp,
    Qfr,
    qfr,
    qint,
    qopf,
    Qopf,
    qprime,
    Qscr,
    qscr,
    quaternions,
    quatint,
    quest,
    questeq,
    quot,
    QUOT,
    rAarr,
    race,
    Racute,
    racute,
    radic,
    raemptyv,
    rang,
    Rang,
    rangd,
    range,
    rangle,
    raquo,
    rarrap,
    rarrb,
    rarrbfs,
    rarrc,
    rarr,
    Rarr,
    rArr,
    rarrfs,
    rarrhk,
    rarrlp,
    rarrpl,
    rarrsim,
    Rarrtl,
    rarrtl,
    rarrw,
    ratail,
    rAtail,
    ratio,
    rationals,
    rbarr,
    rBarr,
    RBarr,
    rbbrk,
    rbrace,
    rbrack,
    rbrke,
    rbrksld,
    rbrkslu,
    Rcaron,
    rcaron,
    Rcedil,
    rcedil,
    rceil,
    rcub,
    Rcy,
    rcy,
    rdca,
    rdldhar,
    rdquo,
    rdquor,
    rdsh,
    real,
    realine,
    realpart,
    reals,
    Re,
    rect,
    reg,
    REG,
    ReverseElement,
    ReverseEquilibrium,
    ReverseUpEquilibrium,
    rfisht,
    rfloor,
    rfr,
    Rfr,
    rHar,
    rhard,
    rharu,
    rharul,
    Rho,
    rho,
    rhov,
    RightAngleBracket,
    RightArrowBar,
    rightarrow,
    RightArrow,
    Rightarrow,
    RightArrowLeftArrow,
    rightarrowtail,
    RightCeiling,
    RightDoubleBracket,
    RightDownTeeVector,
    RightDownVectorBar,
    RightDownVector,
    RightFloor,
    rightharpoondown,
    rightharpoonup,
    rightleftarrows,
    rightleftharpoons,
    rightrightarrows,
    rightsquigarrow,
    RightTeeArrow,
    RightTee,
    RightTeeVector,
    rightthreetimes,
    RightTriangleBar,
    RightTriangle,
    RightTriangleEqual,
    RightUpDownVector,
    RightUpTeeVector,
    RightUpVectorBar,
    RightUpVector,
    RightVectorBar,
    RightVector,
    ring,
    risingdotseq,
    rlarr,
    rlhar,
    rlm,
    rmoustache,
    rmoust,
    rnmid,
    roang,
    roarr,
    robrk,
    ropar,
    ropf,
    Ropf,
    roplus,
    rotimes,
    RoundImplies,
    rpar,
    rpargt,
    rppolint,
    rrarr,
    Rrightarrow,
    rsaquo,
    rscr,
    Rscr,
    rsh,
    Rsh,
    rsqb,
    rsquo,
    rsquor,
    rthree,
    rtimes,
    rtri,
    rtrie,
    rtrif,
    rtriltri,
    RuleDelayed,
    ruluhar,
    rx,
    Sacute,
    sacute,
    sbquo,
    scap,
    Scaron,
    scaron,
    Sc,
    sc,
    sccue,
    sce,
    scE,
    Scedil,
    scedil,
    Scirc,
    scirc,
    scnap,
    scnE,
    scnsim,
    scpolint,
    scsim,
    Scy,
    scy,
    sdotb,
    sdot,
    sdote,
    searhk,
    searr,
    seArr,
    searrow,
    sect,
    semi,
    seswar,
    setminus,
    setmn,
    sext,
    Sfr,
    sfr,
    sfrown,
    sharp,
    SHCHcy,
    shchcy,
    SHcy,
    shcy,
    ShortDownArrow,
    ShortLeftArrow,
    shortmid,
    shortparallel,
    ShortRightArrow,
    ShortUpArrow,
    shy,
    Sigma,
    sigma,
    sigmaf,
    sigmav,
    sim,
    simdot,
    sime,
    simeq,
    simg,
    simgE,
    siml,
    simlE,
    simne,
    simplus,
    simrarr,
    slarr,
    SmallCircle,
    smallsetminus,
    smashp,
    smeparsl,
    smid,
    smile,
    smt,
    smte,
    smtes,
    SOFTcy,
    softcy,
    solbar,
    solb,
    sol,
    Sopf,
    sopf,
    spades,
    spadesuit,
    spar,
    sqcap,
    sqcaps,
    sqcup,
    sqcups,
    Sqrt,
    sqsub,
    sqsube,
    sqsubset,
    sqsubseteq,
    sqsup,
    sqsupe,
    sqsupset,
    sqsupseteq,
    square,
    Square,
    SquareIntersection,
    SquareSubset,
    SquareSubsetEqual,
    SquareSuperset,
    SquareSupersetEqual,
    SquareUnion,
    squarf,
    squ,
    squf,
    srarr,
    Sscr,
    sscr,
    ssetmn,
    ssmile,
    sstarf,
    Star,
    star,
    starf,
    straightepsilon,
    straightphi,
    strns,
    sub,
    Sub,
    subdot,
    subE,
    sube,
    subedot,
    submult,
    subnE,
    subne,
    subplus,
    subrarr,
    subset,
    Subset,
    subseteq,
    subseteqq,
    SubsetEqual,
    subsetneq,
    subsetneqq,
    subsim,
    subsub,
    subsup,
    succapprox,
    succ,
    succcurlyeq,
    Succeeds,
    SucceedsEqual,
    SucceedsSlantEqual,
    SucceedsTilde,
    succeq,
    succnapprox,
    succneqq,
    succnsim,
    succsim,
    SuchThat,
    sum,
    Sum,
    sung,
    sup1,
    sup2,
    sup3,
    sup,
    Sup,
    supdot,
    supdsub,
    supE,
    supe,
    supedot,
    Superset,
    SupersetEqual,
    suphsol,
    suphsub,
    suplarr,
    supmult,
    supnE,
    supne,
    supplus,
    supset,
    Supset,
    supseteq,
    supseteqq,
    supsetneq,
    supsetneqq,
    supsim,
    supsub,
    supsup,
    swarhk,
    swarr,
    swArr,
    swarrow,
    swnwar,
    szlig,
    Tab,
    target,
    Tau,
    tau,
    tbrk,
    Tcaron,
    tcaron,
    Tcedil,
    tcedil,
    Tcy,
    tcy,
    tdot,
    telrec,
    Tfr,
    tfr,
    there4,
    therefore,
    Therefore,
    Theta,
    theta,
    thetasym,
    thetav,
    thickapprox,
    thicksim,
    ThickSpace,
    ThinSpace,
    thinsp,
    thkap,
    thksim,
    THORN,
    thorn,
    tilde,
    Tilde,
    TildeEqual,
    TildeFullEqual,
    TildeTilde,
    timesbar,
    timesb,
    times,
    timesd,
    tint,
    toea,
    topbot,
    topcir,
    top,
    Topf,
    topf,
    topfork,
    tosa,
    tprime,
    trade,
    TRADE,
    triangle,
    triangledown,
    triangleleft,
    trianglelefteq,
    triangleq,
    triangleright,
    trianglerighteq,
    tridot,
    trie,
    triminus,
    TripleDot,
    triplus,
    trisb,
    tritime,
    trpezium,
    Tscr,
    tscr,
    TScy,
    tscy,
    TSHcy,
    tshcy,
    Tstrok,
    tstrok,
    twixt,
    twoheadleftarrow,
    twoheadrightarrow,
    Uacute,
    uacute,
    uarr,
    Uarr,
    uArr,
    Uarrocir,
    Ubrcy,
    ubrcy,
    Ubreve,
    ubreve,
    Ucirc,
    ucirc,
    Ucy,
    ucy,
    udarr,
    Udblac,
    udblac,
    udhar,
    ufisht,
    Ufr,
    ufr,
    Ugrave,
    ugrave,
    uHar,
    uharl,
    uharr,
    uhblk,
    ulcorn,
    ulcorner,
    ulcrop,
    ultri,
    Umacr,
    umacr,
    uml,
    UnderBar,
    UnderBrace,
    UnderBracket,
    UnderParenthesis,
    Union,
    UnionPlus,
    Uogon,
    uogon,
    Uopf,
    uopf,
    UpArrowBar,
    uparrow,
    UpArrow,
    Uparrow,
    UpArrowDownArrow,
    updownarrow,
    UpDownArrow,
    Updownarrow,
    UpEquilibrium,
    upharpoonleft,
    upharpoonright,
    uplus,
    UpperLeftArrow,
    UpperRightArrow,
    upsi,
    Upsi,
    upsih,
    Upsilon,
    upsilon,
    UpTeeArrow,
    UpTee,
    upuparrows,
    urcorn,
    urcorner,
    urcrop,
    Uring,
    uring,
    urtri,
    Uscr,
    uscr,
    utdot,
    Utilde,
    utilde,
    utri,
    utrif,
    uuarr,
    Uuml,
    uuml,
    uwangle,
    vangrt,
    varepsilon,
    varkappa,
    varnothing,
    varphi,
    varpi,
    varpropto,
    varr,
    vArr,
    varrho,
    varsigma,
    varsubsetneq,
    varsubsetneqq,
    varsupsetneq,
    varsupsetneqq,
    vartheta,
    vartriangleleft,
    vartriangleright,
    vBar,
    Vbar,
    vBarv,
    Vcy,
    vcy,
    vdash,
    vDash,
    Vdash,
    VDash,
    Vdashl,
    veebar,
    vee,
    Vee,
    veeeq,
    vellip,
    verbar,
    Verbar,
    vert,
    Vert,
    VerticalBar,
    VerticalLine,
    VerticalSeparator,
    VerticalTilde,
    VeryThinSpace,
    Vfr,
    vfr,
    vltri,
    vnsub,
    vnsup,
    Vopf,
    vopf,
    vprop,
    vrtri,
    Vscr,
    vscr,
    vsubnE,
    vsubne,
    vsupnE,
    vsupne,
    Vvdash,
    vzigzag,
    Wcirc,
    wcirc,
    wedbar,
    wedge,
    Wedge,
    wedgeq,
    weierp,
    Wfr,
    wfr,
    Wopf,
    wopf,
    wp,
    wr,
    wreath,
    Wscr,
    wscr,
    xcap,
    xcirc,
    xcup,
    xdtri,
    Xfr,
    xfr,
    xharr,
    xhArr,
    Xi,
    xi,
    xlarr,
    xlArr,
    xmap,
    xnis,
    xodot,
    Xopf,
    xopf,
    xoplus,
    xotime,
    xrarr,
    xrArr,
    Xscr,
    xscr,
    xsqcup,
    xuplus,
    xutri,
    xvee,
    xwedge,
    Yacute,
    yacute,
    YAcy,
    yacy,
    Ycirc,
    ycirc,
    Ycy,
    ycy,
    yen,
    Yfr,
    yfr,
    YIcy,
    yicy,
    Yopf,
    yopf,
    Yscr,
    yscr,
    YUcy,
    yucy,
    yuml,
    Yuml,
    Zacute,
    zacute,
    Zcaron,
    zcaron,
    Zcy,
    zcy,
    Zdot,
    zdot,
    zeetrf,
    ZeroWidthSpace,
    Zeta,
    zeta,
    zfr,
    Zfr,
    ZHcy,
    zhcy,
    zigrarr,
    zopf,
    Zopf,
    Zscr,
    zscr,
    zwj,
    zwnj
  },
  entities$2 = {
    __proto__: null,
    AElig,
    AMP,
    Aacute,
    Abreve,
    Acirc,
    Acy,
    Afr,
    Agrave,
    Alpha,
    Amacr,
    And,
    Aogon,
    Aopf,
    ApplyFunction,
    Aring,
    Ascr,
    Assign,
    Atilde,
    Auml,
    Backslash,
    Barv,
    Barwed,
    Bcy,
    Because,
    Bernoullis,
    Beta,
    Bfr,
    Bopf,
    Breve,
    Bscr,
    Bumpeq,
    CHcy,
    COPY,
    Cacute,
    Cap,
    CapitalDifferentialD,
    Cayleys,
    Ccaron,
    Ccedil,
    Ccirc,
    Cconint,
    Cdot,
    Cedilla,
    CenterDot,
    Cfr,
    Chi,
    CircleDot,
    CircleMinus,
    CirclePlus,
    CircleTimes,
    ClockwiseContourIntegral,
    CloseCurlyDoubleQuote,
    CloseCurlyQuote,
    Colon,
    Colone,
    Congruent,
    Conint,
    ContourIntegral,
    Copf,
    Coproduct,
    CounterClockwiseContourIntegral,
    Cross,
    Cscr,
    Cup,
    CupCap,
    DD,
    DDotrahd,
    DJcy,
    DScy,
    DZcy,
    Dagger,
    Darr,
    Dashv,
    Dcaron,
    Dcy,
    Del,
    Delta,
    Dfr,
    DiacriticalAcute,
    DiacriticalDot,
    DiacriticalDoubleAcute,
    DiacriticalGrave,
    DiacriticalTilde,
    Diamond,
    DifferentialD,
    Dopf,
    Dot,
    DotDot,
    DotEqual,
    DoubleContourIntegral,
    DoubleDot,
    DoubleDownArrow,
    DoubleLeftArrow,
    DoubleLeftRightArrow,
    DoubleLeftTee,
    DoubleLongLeftArrow,
    DoubleLongLeftRightArrow,
    DoubleLongRightArrow,
    DoubleRightArrow,
    DoubleRightTee,
    DoubleUpArrow,
    DoubleUpDownArrow,
    DoubleVerticalBar,
    DownArrow,
    DownArrowBar,
    DownArrowUpArrow,
    DownBreve,
    DownLeftRightVector,
    DownLeftTeeVector,
    DownLeftVector,
    DownLeftVectorBar,
    DownRightTeeVector,
    DownRightVector,
    DownRightVectorBar,
    DownTee,
    DownTeeArrow,
    Downarrow,
    Dscr,
    Dstrok,
    ENG,
    ETH,
    Eacute,
    Ecaron,
    Ecirc,
    Ecy,
    Edot,
    Efr,
    Egrave,
    Element,
    Emacr,
    EmptySmallSquare,
    EmptyVerySmallSquare,
    Eogon,
    Eopf,
    Epsilon,
    Equal,
    EqualTilde,
    Equilibrium,
    Escr,
    Esim,
    Eta,
    Euml,
    Exists,
    ExponentialE,
    Fcy,
    Ffr,
    FilledSmallSquare,
    FilledVerySmallSquare,
    Fopf,
    ForAll,
    Fouriertrf,
    Fscr,
    GJcy,
    GT,
    Gamma,
    Gammad,
    Gbreve,
    Gcedil,
    Gcirc,
    Gcy,
    Gdot,
    Gfr,
    Gg,
    Gopf,
    GreaterEqual,
    GreaterEqualLess,
    GreaterFullEqual,
    GreaterGreater,
    GreaterLess,
    GreaterSlantEqual,
    GreaterTilde,
    Gscr,
    Gt,
    HARDcy,
    Hacek,
    Hat,
    Hcirc,
    Hfr,
    HilbertSpace,
    Hopf,
    HorizontalLine,
    Hscr,
    Hstrok,
    HumpDownHump,
    HumpEqual,
    IEcy,
    IJlig,
    IOcy,
    Iacute,
    Icirc,
    Icy,
    Idot,
    Ifr,
    Igrave,
    Im,
    Imacr,
    ImaginaryI,
    Implies,
    Int,
    Integral,
    Intersection,
    InvisibleComma,
    InvisibleTimes,
    Iogon,
    Iopf,
    Iota,
    Iscr,
    Itilde,
    Iukcy,
    Iuml,
    Jcirc,
    Jcy,
    Jfr,
    Jopf,
    Jscr,
    Jsercy,
    Jukcy,
    KHcy,
    KJcy,
    Kappa,
    Kcedil,
    Kcy,
    Kfr,
    Kopf,
    Kscr,
    LJcy,
    LT,
    Lacute,
    Lambda,
    Lang,
    Laplacetrf,
    Larr,
    Lcaron,
    Lcedil,
    Lcy,
    LeftAngleBracket,
    LeftArrow,
    LeftArrowBar,
    LeftArrowRightArrow,
    LeftCeiling,
    LeftDoubleBracket,
    LeftDownTeeVector,
    LeftDownVector,
    LeftDownVectorBar,
    LeftFloor,
    LeftRightArrow,
    LeftRightVector,
    LeftTee,
    LeftTeeArrow,
    LeftTeeVector,
    LeftTriangle,
    LeftTriangleBar,
    LeftTriangleEqual,
    LeftUpDownVector,
    LeftUpTeeVector,
    LeftUpVector,
    LeftUpVectorBar,
    LeftVector,
    LeftVectorBar,
    Leftarrow,
    Leftrightarrow,
    LessEqualGreater,
    LessFullEqual,
    LessGreater,
    LessLess,
    LessSlantEqual,
    LessTilde,
    Lfr,
    Ll,
    Lleftarrow,
    Lmidot,
    LongLeftArrow,
    LongLeftRightArrow,
    LongRightArrow,
    Longleftarrow,
    Longleftrightarrow,
    Longrightarrow,
    Lopf,
    LowerLeftArrow,
    LowerRightArrow,
    Lscr,
    Lsh,
    Lstrok,
    Lt,
    Mcy,
    MediumSpace,
    Mellintrf,
    Mfr,
    MinusPlus,
    Mopf,
    Mscr,
    Mu,
    NJcy,
    Nacute,
    Ncaron,
    Ncedil,
    Ncy,
    NegativeMediumSpace,
    NegativeThickSpace,
    NegativeThinSpace,
    NegativeVeryThinSpace,
    NestedGreaterGreater,
    NestedLessLess,
    NewLine,
    Nfr,
    NoBreak,
    NonBreakingSpace,
    Nopf,
    Not,
    NotCongruent,
    NotCupCap,
    NotDoubleVerticalBar,
    NotElement,
    NotEqual,
    NotEqualTilde,
    NotExists,
    NotGreater,
    NotGreaterEqual,
    NotGreaterFullEqual,
    NotGreaterGreater,
    NotGreaterLess,
    NotGreaterSlantEqual,
    NotGreaterTilde,
    NotHumpDownHump,
    NotHumpEqual,
    NotLeftTriangle,
    NotLeftTriangleBar,
    NotLeftTriangleEqual,
    NotLess,
    NotLessEqual,
    NotLessGreater,
    NotLessLess,
    NotLessSlantEqual,
    NotLessTilde,
    NotNestedGreaterGreater,
    NotNestedLessLess,
    NotPrecedes,
    NotPrecedesEqual,
    NotPrecedesSlantEqual,
    NotReverseElement,
    NotRightTriangle,
    NotRightTriangleBar,
    NotRightTriangleEqual,
    NotSquareSubset,
    NotSquareSubsetEqual,
    NotSquareSuperset,
    NotSquareSupersetEqual,
    NotSubset,
    NotSubsetEqual,
    NotSucceeds,
    NotSucceedsEqual,
    NotSucceedsSlantEqual,
    NotSucceedsTilde,
    NotSuperset,
    NotSupersetEqual,
    NotTilde,
    NotTildeEqual,
    NotTildeFullEqual,
    NotTildeTilde,
    NotVerticalBar,
    Nscr,
    Ntilde,
    Nu,
    OElig,
    Oacute,
    Ocirc,
    Ocy,
    Odblac,
    Ofr,
    Ograve,
    Omacr,
    Omega,
    Omicron,
    Oopf,
    OpenCurlyDoubleQuote,
    OpenCurlyQuote,
    Or,
    Oscr,
    Oslash,
    Otilde,
    Otimes,
    Ouml,
    OverBar,
    OverBrace,
    OverBracket,
    OverParenthesis,
    PartialD,
    Pcy,
    Pfr,
    Phi,
    Pi,
    PlusMinus,
    Poincareplane,
    Popf,
    Pr,
    Precedes,
    PrecedesEqual,
    PrecedesSlantEqual,
    PrecedesTilde,
    Prime,
    Product,
    Proportion,
    Proportional,
    Pscr,
    Psi,
    QUOT,
    Qfr,
    Qopf,
    Qscr,
    RBarr,
    REG,
    Racute,
    Rang,
    Rarr,
    Rarrtl,
    Rcaron,
    Rcedil,
    Rcy,
    Re,
    ReverseElement,
    ReverseEquilibrium,
    ReverseUpEquilibrium,
    Rfr,
    Rho,
    RightAngleBracket,
    RightArrow,
    RightArrowBar,
    RightArrowLeftArrow,
    RightCeiling,
    RightDoubleBracket,
    RightDownTeeVector,
    RightDownVector,
    RightDownVectorBar,
    RightFloor,
    RightTee,
    RightTeeArrow,
    RightTeeVector,
    RightTriangle,
    RightTriangleBar,
    RightTriangleEqual,
    RightUpDownVector,
    RightUpTeeVector,
    RightUpVector,
    RightUpVectorBar,
    RightVector,
    RightVectorBar,
    Rightarrow,
    Ropf,
    RoundImplies,
    Rrightarrow,
    Rscr,
    Rsh,
    RuleDelayed,
    SHCHcy,
    SHcy,
    SOFTcy,
    Sacute,
    Sc,
    Scaron,
    Scedil,
    Scirc,
    Scy,
    Sfr,
    ShortDownArrow,
    ShortLeftArrow,
    ShortRightArrow,
    ShortUpArrow,
    Sigma,
    SmallCircle,
    Sopf,
    Sqrt,
    Square,
    SquareIntersection,
    SquareSubset,
    SquareSubsetEqual,
    SquareSuperset,
    SquareSupersetEqual,
    SquareUnion,
    Sscr,
    Star,
    Sub,
    Subset,
    SubsetEqual,
    Succeeds,
    SucceedsEqual,
    SucceedsSlantEqual,
    SucceedsTilde,
    SuchThat,
    Sum,
    Sup,
    Superset,
    SupersetEqual,
    Supset,
    THORN,
    TRADE,
    TSHcy,
    TScy,
    Tab,
    Tau,
    Tcaron,
    Tcedil,
    Tcy,
    Tfr,
    Therefore,
    Theta,
    ThickSpace,
    ThinSpace,
    Tilde,
    TildeEqual,
    TildeFullEqual,
    TildeTilde,
    Topf,
    TripleDot,
    Tscr,
    Tstrok,
    Uacute,
    Uarr,
    Uarrocir,
    Ubrcy,
    Ubreve,
    Ucirc,
    Ucy,
    Udblac,
    Ufr,
    Ugrave,
    Umacr,
    UnderBar,
    UnderBrace,
    UnderBracket,
    UnderParenthesis,
    Union,
    UnionPlus,
    Uogon,
    Uopf,
    UpArrow,
    UpArrowBar,
    UpArrowDownArrow,
    UpDownArrow,
    UpEquilibrium,
    UpTee,
    UpTeeArrow,
    Uparrow,
    Updownarrow,
    UpperLeftArrow,
    UpperRightArrow,
    Upsi,
    Upsilon,
    Uring,
    Uscr,
    Utilde,
    Uuml,
    VDash,
    Vbar,
    Vcy,
    Vdash,
    Vdashl,
    Vee,
    Verbar,
    Vert,
    VerticalBar,
    VerticalLine,
    VerticalSeparator,
    VerticalTilde,
    VeryThinSpace,
    Vfr,
    Vopf,
    Vscr,
    Vvdash,
    Wcirc,
    Wedge,
    Wfr,
    Wopf,
    Wscr,
    Xfr,
    Xi,
    Xopf,
    Xscr,
    YAcy,
    YIcy,
    YUcy,
    Yacute,
    Ycirc,
    Ycy,
    Yfr,
    Yopf,
    Yscr,
    Yuml,
    ZHcy,
    Zacute,
    Zcaron,
    Zcy,
    Zdot,
    ZeroWidthSpace,
    Zeta,
    Zfr,
    Zopf,
    Zscr,
    aacute,
    abreve,
    ac,
    acE,
    acd,
    acirc,
    acute,
    acy,
    aelig,
    af,
    afr,
    agrave,
    alefsym,
    aleph,
    alpha,
    amacr,
    amalg,
    amp,
    and,
    andand,
    andd,
    andslope,
    andv,
    ang,
    ange,
    angle,
    angmsd,
    angmsdaa,
    angmsdab,
    angmsdac,
    angmsdad,
    angmsdae,
    angmsdaf,
    angmsdag,
    angmsdah,
    angrt,
    angrtvb,
    angrtvbd,
    angsph,
    angst,
    angzarr,
    aogon,
    aopf,
    ap,
    apE,
    apacir,
    ape,
    apid,
    apos,
    approx,
    approxeq,
    aring,
    ascr,
    ast,
    asymp,
    asympeq,
    atilde,
    auml,
    awconint,
    awint,
    bNot,
    backcong,
    backepsilon,
    backprime,
    backsim,
    backsimeq,
    barvee,
    barwed,
    barwedge,
    bbrk,
    bbrktbrk,
    bcong,
    bcy,
    bdquo,
    becaus,
    because,
    bemptyv,
    bepsi,
    bernou,
    beta,
    beth,
    between,
    bfr,
    bigcap,
    bigcirc,
    bigcup,
    bigodot,
    bigoplus,
    bigotimes,
    bigsqcup,
    bigstar,
    bigtriangledown,
    bigtriangleup,
    biguplus,
    bigvee,
    bigwedge,
    bkarow,
    blacklozenge,
    blacksquare,
    blacktriangle,
    blacktriangledown,
    blacktriangleleft,
    blacktriangleright,
    blank,
    blk12,
    blk14,
    blk34,
    block,
    bne,
    bnequiv,
    bnot,
    bopf,
    bot,
    bottom,
    bowtie,
    boxDL,
    boxDR,
    boxDl,
    boxDr,
    boxH,
    boxHD,
    boxHU,
    boxHd,
    boxHu,
    boxUL,
    boxUR,
    boxUl,
    boxUr,
    boxV,
    boxVH,
    boxVL,
    boxVR,
    boxVh,
    boxVl,
    boxVr,
    boxbox,
    boxdL,
    boxdR,
    boxdl,
    boxdr,
    boxh,
    boxhD,
    boxhU,
    boxhd,
    boxhu,
    boxminus,
    boxplus,
    boxtimes,
    boxuL,
    boxuR,
    boxul,
    boxur,
    boxv,
    boxvH,
    boxvL,
    boxvR,
    boxvh,
    boxvl,
    boxvr,
    bprime,
    breve,
    brvbar,
    bscr,
    bsemi,
    bsim,
    bsime,
    bsol,
    bsolb,
    bsolhsub,
    bull,
    bullet,
    bump,
    bumpE,
    bumpe,
    bumpeq,
    cacute,
    cap,
    capand,
    capbrcup,
    capcap,
    capcup,
    capdot,
    caps,
    caret,
    caron,
    ccaps,
    ccaron,
    ccedil,
    ccirc,
    ccups,
    ccupssm,
    cdot,
    cedil,
    cemptyv,
    cent,
    centerdot,
    cfr,
    chcy,
    check,
    checkmark,
    chi,
    cir,
    cirE,
    circ,
    circeq,
    circlearrowleft,
    circlearrowright,
    circledR,
    circledS,
    circledast,
    circledcirc,
    circleddash,
    cire,
    cirfnint,
    cirmid,
    cirscir,
    clubs,
    clubsuit,
    colon,
    colone,
    coloneq,
    comma,
    commat,
    comp,
    compfn,
    complement,
    complexes,
    cong,
    congdot,
    conint,
    copf,
    coprod,
    copy,
    copysr,
    crarr,
    cross,
    cscr,
    csub,
    csube,
    csup,
    csupe,
    ctdot,
    cudarrl,
    cudarrr,
    cuepr,
    cuesc,
    cularr,
    cularrp,
    cup,
    cupbrcap,
    cupcap,
    cupcup,
    cupdot,
    cupor,
    cups,
    curarr,
    curarrm,
    curlyeqprec,
    curlyeqsucc,
    curlyvee,
    curlywedge,
    curren,
    curvearrowleft,
    curvearrowright,
    cuvee,
    cuwed,
    cwconint,
    cwint,
    cylcty,
    dArr,
    dHar,
    dagger,
    daleth,
    darr,
    dash,
    dashv,
    dbkarow,
    dblac,
    dcaron,
    dcy,
    dd,
    ddagger,
    ddarr,
    ddotseq,
    default: entities$1,
    deg,
    delta,
    demptyv,
    dfisht,
    dfr,
    dharl,
    dharr,
    diam,
    diamond,
    diamondsuit,
    diams,
    die,
    digamma,
    disin,
    div,
    divide,
    divideontimes,
    divonx,
    djcy,
    dlcorn,
    dlcrop,
    dollar,
    dopf,
    dot,
    doteq,
    doteqdot,
    dotminus,
    dotplus,
    dotsquare,
    doublebarwedge,
    downarrow,
    downdownarrows,
    downharpoonleft,
    downharpoonright,
    drbkarow,
    drcorn,
    drcrop,
    dscr,
    dscy,
    dsol,
    dstrok,
    dtdot,
    dtri,
    dtrif,
    duarr,
    duhar,
    dwangle,
    dzcy,
    dzigrarr,
    eDDot,
    eDot,
    eacute,
    easter,
    ecaron,
    ecir,
    ecirc,
    ecolon,
    ecy,
    edot,
    ee,
    efDot,
    efr,
    eg,
    egrave,
    egs,
    egsdot,
    el,
    elinters,
    ell,
    els,
    elsdot,
    emacr,
    empty,
    emptyset,
    emptyv,
    emsp,
    emsp13,
    emsp14,
    eng,
    ensp,
    eogon,
    eopf,
    epar,
    eparsl,
    eplus,
    epsi,
    epsilon,
    epsiv,
    eqcirc,
    eqcolon,
    eqsim,
    eqslantgtr,
    eqslantless,
    equals,
    equest,
    equiv,
    equivDD,
    eqvparsl,
    erDot,
    erarr,
    escr,
    esdot,
    esim,
    eta,
    eth,
    euml,
    euro,
    excl,
    exist,
    expectation,
    exponentiale,
    fallingdotseq,
    fcy,
    female,
    ffilig,
    fflig,
    ffllig,
    ffr,
    filig,
    fjlig,
    flat,
    fllig,
    fltns,
    fnof,
    fopf,
    forall,
    fork,
    forkv,
    fpartint,
    frac12,
    frac13,
    frac14,
    frac15,
    frac16,
    frac18,
    frac23,
    frac25,
    frac34,
    frac35,
    frac38,
    frac45,
    frac56,
    frac58,
    frac78,
    frasl,
    frown,
    fscr,
    gE,
    gEl,
    gacute,
    gamma,
    gammad,
    gap,
    gbreve,
    gcirc,
    gcy,
    gdot,
    ge,
    gel,
    geq,
    geqq,
    geqslant,
    ges,
    gescc,
    gesdot,
    gesdoto,
    gesdotol,
    gesl,
    gesles,
    gfr,
    gg,
    ggg,
    gimel,
    gjcy,
    gl,
    glE,
    gla,
    glj,
    gnE,
    gnap,
    gnapprox,
    gne,
    gneq,
    gneqq,
    gnsim,
    gopf,
    grave,
    gscr,
    gsim,
    gsime,
    gsiml,
    gt,
    gtcc,
    gtcir,
    gtdot,
    gtlPar,
    gtquest,
    gtrapprox,
    gtrarr,
    gtrdot,
    gtreqless,
    gtreqqless,
    gtrless,
    gtrsim,
    gvertneqq,
    gvnE,
    hArr,
    hairsp,
    half,
    hamilt,
    hardcy,
    harr,
    harrcir,
    harrw,
    hbar,
    hcirc,
    hearts,
    heartsuit,
    hellip,
    hercon,
    hfr,
    hksearow,
    hkswarow,
    hoarr,
    homtht,
    hookleftarrow,
    hookrightarrow,
    hopf,
    horbar,
    hscr,
    hslash,
    hstrok,
    hybull,
    hyphen,
    iacute,
    ic,
    icirc,
    icy,
    iecy,
    iexcl,
    iff,
    ifr,
    igrave,
    ii,
    iiiint,
    iiint,
    iinfin,
    iiota,
    ijlig,
    imacr,
    image,
    imagline,
    imagpart,
    imath,
    imof,
    imped,
    incare,
    infin,
    infintie,
    inodot,
    int,
    intcal,
    integers,
    intercal,
    intlarhk,
    intprod,
    iocy,
    iogon,
    iopf,
    iota,
    iprod,
    iquest,
    iscr,
    isin,
    isinE,
    isindot,
    isins,
    isinsv,
    isinv,
    it,
    itilde,
    iukcy,
    iuml,
    jcirc,
    jcy,
    jfr,
    jmath,
    jopf,
    jscr,
    jsercy,
    jukcy,
    kappa,
    kappav,
    kcedil,
    kcy,
    kfr,
    kgreen,
    khcy,
    kjcy,
    kopf,
    kscr,
    lAarr,
    lArr,
    lAtail,
    lBarr,
    lE,
    lEg,
    lHar,
    lacute,
    laemptyv,
    lagran,
    lambda,
    lang,
    langd,
    langle,
    lap,
    laquo,
    larr,
    larrb,
    larrbfs,
    larrfs,
    larrhk,
    larrlp,
    larrpl,
    larrsim,
    larrtl,
    lat,
    latail,
    late,
    lates,
    lbarr,
    lbbrk,
    lbrace,
    lbrack,
    lbrke,
    lbrksld,
    lbrkslu,
    lcaron,
    lcedil,
    lceil,
    lcub,
    lcy,
    ldca,
    ldquo,
    ldquor,
    ldrdhar,
    ldrushar,
    ldsh,
    le,
    leftarrow,
    leftarrowtail,
    leftharpoondown,
    leftharpoonup,
    leftleftarrows,
    leftrightarrow,
    leftrightarrows,
    leftrightharpoons,
    leftrightsquigarrow,
    leftthreetimes,
    leg,
    leq,
    leqq,
    leqslant,
    les,
    lescc,
    lesdot,
    lesdoto,
    lesdotor,
    lesg,
    lesges,
    lessapprox,
    lessdot,
    lesseqgtr,
    lesseqqgtr,
    lessgtr,
    lesssim,
    lfisht,
    lfloor,
    lfr,
    lg,
    lgE,
    lhard,
    lharu,
    lharul,
    lhblk,
    ljcy,
    ll,
    llarr,
    llcorner,
    llhard,
    lltri,
    lmidot,
    lmoust,
    lmoustache,
    lnE,
    lnap,
    lnapprox,
    lne,
    lneq,
    lneqq,
    lnsim,
    loang,
    loarr,
    lobrk,
    longleftarrow,
    longleftrightarrow,
    longmapsto,
    longrightarrow,
    looparrowleft,
    looparrowright,
    lopar,
    lopf,
    loplus,
    lotimes,
    lowast,
    lowbar,
    loz,
    lozenge,
    lozf,
    lpar,
    lparlt,
    lrarr,
    lrcorner,
    lrhar,
    lrhard,
    lrm,
    lrtri,
    lsaquo,
    lscr,
    lsh,
    lsim,
    lsime,
    lsimg,
    lsqb,
    lsquo,
    lsquor,
    lstrok,
    lt,
    ltcc,
    ltcir,
    ltdot,
    lthree,
    ltimes,
    ltlarr,
    ltquest,
    ltrPar,
    ltri,
    ltrie,
    ltrif,
    lurdshar,
    luruhar,
    lvertneqq,
    lvnE,
    mDDot,
    macr,
    male,
    malt,
    maltese,
    map,
    mapsto,
    mapstodown,
    mapstoleft,
    mapstoup,
    marker,
    mcomma,
    mcy,
    mdash,
    measuredangle,
    mfr,
    mho,
    micro,
    mid,
    midast,
    midcir,
    middot,
    minus,
    minusb,
    minusd,
    minusdu,
    mlcp,
    mldr,
    mnplus,
    models,
    mopf,
    mp,
    mscr,
    mstpos,
    mu,
    multimap,
    mumap,
    nGg,
    nGt,
    nGtv,
    nLeftarrow,
    nLeftrightarrow,
    nLl,
    nLt,
    nLtv,
    nRightarrow,
    nVDash,
    nVdash,
    nabla,
    nacute,
    nang,
    nap,
    napE,
    napid,
    napos,
    napprox,
    natur,
    natural,
    naturals,
    nbsp,
    nbump,
    nbumpe,
    ncap,
    ncaron,
    ncedil,
    ncong,
    ncongdot,
    ncup,
    ncy,
    ndash,
    ne,
    neArr,
    nearhk,
    nearr,
    nearrow,
    nedot,
    nequiv,
    nesear,
    nesim,
    nexist,
    nexists,
    nfr,
    ngE,
    nge,
    ngeq,
    ngeqq,
    ngeqslant,
    nges,
    ngsim,
    ngt,
    ngtr,
    nhArr,
    nharr,
    nhpar,
    ni,
    nis,
    nisd,
    niv,
    njcy,
    nlArr,
    nlE,
    nlarr,
    nldr,
    nle,
    nleftarrow,
    nleftrightarrow,
    nleq,
    nleqq,
    nleqslant,
    nles,
    nless,
    nlsim,
    nlt,
    nltri,
    nltrie,
    nmid,
    nopf,
    not,
    notin,
    notinE,
    notindot,
    notinva,
    notinvb,
    notinvc,
    notni,
    notniva,
    notnivb,
    notnivc,
    npar,
    nparallel,
    nparsl,
    npart,
    npolint,
    npr,
    nprcue,
    npre,
    nprec,
    npreceq,
    nrArr,
    nrarr,
    nrarrc,
    nrarrw,
    nrightarrow,
    nrtri,
    nrtrie,
    nsc,
    nsccue,
    nsce,
    nscr,
    nshortmid,
    nshortparallel,
    nsim,
    nsime,
    nsimeq,
    nsmid,
    nspar,
    nsqsube,
    nsqsupe,
    nsub,
    nsubE,
    nsube,
    nsubset,
    nsubseteq,
    nsubseteqq,
    nsucc,
    nsucceq,
    nsup,
    nsupE,
    nsupe,
    nsupset,
    nsupseteq,
    nsupseteqq,
    ntgl,
    ntilde,
    ntlg,
    ntriangleleft,
    ntrianglelefteq,
    ntriangleright,
    ntrianglerighteq,
    nu,
    num,
    numero,
    numsp,
    nvDash,
    nvHarr,
    nvap,
    nvdash,
    nvge,
    nvgt,
    nvinfin,
    nvlArr,
    nvle,
    nvlt,
    nvltrie,
    nvrArr,
    nvrtrie,
    nvsim,
    nwArr,
    nwarhk,
    nwarr,
    nwarrow,
    nwnear,
    oS,
    oacute,
    oast,
    ocir,
    ocirc,
    ocy,
    odash,
    odblac,
    odiv,
    odot,
    odsold,
    oelig,
    ofcir,
    ofr,
    ogon,
    ograve,
    ogt,
    ohbar,
    ohm,
    oint,
    olarr,
    olcir,
    olcross,
    oline,
    olt,
    omacr,
    omega,
    omicron,
    omid,
    ominus,
    oopf,
    opar,
    operp,
    oplus,
    or,
    orarr,
    ord,
    order,
    orderof,
    ordf,
    ordm,
    origof,
    oror,
    orslope,
    orv,
    oscr,
    oslash,
    osol,
    otilde,
    otimes,
    otimesas,
    ouml,
    ovbar,
    par,
    para,
    parallel,
    parsim,
    parsl,
    part,
    pcy,
    percnt,
    period,
    permil,
    perp,
    pertenk,
    pfr,
    phi,
    phiv,
    phmmat,
    phone,
    pi,
    pitchfork,
    piv,
    planck,
    planckh,
    plankv,
    plus,
    plusacir,
    plusb,
    pluscir,
    plusdo,
    plusdu,
    pluse,
    plusmn,
    plussim,
    plustwo,
    pm,
    pointint,
    popf,
    pound,
    pr,
    prE,
    prap,
    prcue,
    pre,
    prec,
    precapprox,
    preccurlyeq,
    preceq,
    precnapprox,
    precneqq,
    precnsim,
    precsim,
    prime,
    primes,
    prnE,
    prnap,
    prnsim,
    prod,
    profalar,
    profline,
    profsurf,
    prop,
    propto,
    prsim,
    prurel,
    pscr,
    psi,
    puncsp,
    qfr,
    qint,
    qopf,
    qprime,
    qscr,
    quaternions,
    quatint,
    quest,
    questeq,
    quot,
    rAarr,
    rArr,
    rAtail,
    rBarr,
    rHar,
    race,
    racute,
    radic,
    raemptyv,
    rang,
    rangd,
    range,
    rangle,
    raquo,
    rarr,
    rarrap,
    rarrb,
    rarrbfs,
    rarrc,
    rarrfs,
    rarrhk,
    rarrlp,
    rarrpl,
    rarrsim,
    rarrtl,
    rarrw,
    ratail,
    ratio,
    rationals,
    rbarr,
    rbbrk,
    rbrace,
    rbrack,
    rbrke,
    rbrksld,
    rbrkslu,
    rcaron,
    rcedil,
    rceil,
    rcub,
    rcy,
    rdca,
    rdldhar,
    rdquo,
    rdquor,
    rdsh,
    real,
    realine,
    realpart,
    reals,
    rect,
    reg,
    rfisht,
    rfloor,
    rfr,
    rhard,
    rharu,
    rharul,
    rho,
    rhov,
    rightarrow,
    rightarrowtail,
    rightharpoondown,
    rightharpoonup,
    rightleftarrows,
    rightleftharpoons,
    rightrightarrows,
    rightsquigarrow,
    rightthreetimes,
    ring,
    risingdotseq,
    rlarr,
    rlhar,
    rlm,
    rmoust,
    rmoustache,
    rnmid,
    roang,
    roarr,
    robrk,
    ropar,
    ropf,
    roplus,
    rotimes,
    rpar,
    rpargt,
    rppolint,
    rrarr,
    rsaquo,
    rscr,
    rsh,
    rsqb,
    rsquo,
    rsquor,
    rthree,
    rtimes,
    rtri,
    rtrie,
    rtrif,
    rtriltri,
    ruluhar,
    rx,
    sacute,
    sbquo,
    sc,
    scE,
    scap,
    scaron,
    sccue,
    sce,
    scedil,
    scirc,
    scnE,
    scnap,
    scnsim,
    scpolint,
    scsim,
    scy,
    sdot,
    sdotb,
    sdote,
    seArr,
    searhk,
    searr,
    searrow,
    sect,
    semi,
    seswar,
    setminus,
    setmn,
    sext,
    sfr,
    sfrown,
    sharp,
    shchcy,
    shcy,
    shortmid,
    shortparallel,
    shy,
    sigma,
    sigmaf,
    sigmav,
    sim,
    simdot,
    sime,
    simeq,
    simg,
    simgE,
    siml,
    simlE,
    simne,
    simplus,
    simrarr,
    slarr,
    smallsetminus,
    smashp,
    smeparsl,
    smid,
    smile,
    smt,
    smte,
    smtes,
    softcy,
    sol,
    solb,
    solbar,
    sopf,
    spades,
    spadesuit,
    spar,
    sqcap,
    sqcaps,
    sqcup,
    sqcups,
    sqsub,
    sqsube,
    sqsubset,
    sqsubseteq,
    sqsup,
    sqsupe,
    sqsupset,
    sqsupseteq,
    squ,
    square,
    squarf,
    squf,
    srarr,
    sscr,
    ssetmn,
    ssmile,
    sstarf,
    star,
    starf,
    straightepsilon,
    straightphi,
    strns,
    sub,
    subE,
    subdot,
    sube,
    subedot,
    submult,
    subnE,
    subne,
    subplus,
    subrarr,
    subset,
    subseteq,
    subseteqq,
    subsetneq,
    subsetneqq,
    subsim,
    subsub,
    subsup,
    succ,
    succapprox,
    succcurlyeq,
    succeq,
    succnapprox,
    succneqq,
    succnsim,
    succsim,
    sum,
    sung,
    sup,
    sup1,
    sup2,
    sup3,
    supE,
    supdot,
    supdsub,
    supe,
    supedot,
    suphsol,
    suphsub,
    suplarr,
    supmult,
    supnE,
    supne,
    supplus,
    supset,
    supseteq,
    supseteqq,
    supsetneq,
    supsetneqq,
    supsim,
    supsub,
    supsup,
    swArr,
    swarhk,
    swarr,
    swarrow,
    swnwar,
    szlig,
    target,
    tau,
    tbrk,
    tcaron,
    tcedil,
    tcy,
    tdot,
    telrec,
    tfr,
    there4,
    therefore,
    theta,
    thetasym,
    thetav,
    thickapprox,
    thicksim,
    thinsp,
    thkap,
    thksim,
    thorn,
    tilde,
    times,
    timesb,
    timesbar,
    timesd,
    tint,
    toea,
    top,
    topbot,
    topcir,
    topf,
    topfork,
    tosa,
    tprime,
    trade,
    triangle,
    triangledown,
    triangleleft,
    trianglelefteq,
    triangleq,
    triangleright,
    trianglerighteq,
    tridot,
    trie,
    triminus,
    triplus,
    trisb,
    tritime,
    trpezium,
    tscr,
    tscy,
    tshcy,
    tstrok,
    twixt,
    twoheadleftarrow,
    twoheadrightarrow,
    uArr,
    uHar,
    uacute,
    uarr,
    ubrcy,
    ubreve,
    ucirc,
    ucy,
    udarr,
    udblac,
    udhar,
    ufisht,
    ufr,
    ugrave,
    uharl,
    uharr,
    uhblk,
    ulcorn,
    ulcorner,
    ulcrop,
    ultri,
    umacr,
    uml,
    uogon,
    uopf,
    uparrow,
    updownarrow,
    upharpoonleft,
    upharpoonright,
    uplus,
    upsi,
    upsih,
    upsilon,
    upuparrows,
    urcorn,
    urcorner,
    urcrop,
    uring,
    urtri,
    uscr,
    utdot,
    utilde,
    utri,
    utrif,
    uuarr,
    uuml,
    uwangle,
    vArr,
    vBar,
    vBarv,
    vDash,
    vangrt,
    varepsilon,
    varkappa,
    varnothing,
    varphi,
    varpi,
    varpropto,
    varr,
    varrho,
    varsigma,
    varsubsetneq,
    varsubsetneqq,
    varsupsetneq,
    varsupsetneqq,
    vartheta,
    vartriangleleft,
    vartriangleright,
    vcy,
    vdash,
    vee,
    veebar,
    veeeq,
    vellip,
    verbar,
    vert,
    vfr,
    vltri,
    vnsub,
    vnsup,
    vopf,
    vprop,
    vrtri,
    vscr,
    vsubnE,
    vsubne,
    vsupnE,
    vsupne,
    vzigzag,
    wcirc,
    wedbar,
    wedge,
    wedgeq,
    weierp,
    wfr,
    wopf,
    wp,
    wr,
    wreath,
    wscr,
    xcap,
    xcirc,
    xcup,
    xdtri,
    xfr,
    xhArr,
    xharr,
    xi,
    xlArr,
    xlarr,
    xmap,
    xnis,
    xodot,
    xopf,
    xoplus,
    xotime,
    xrArr,
    xrarr,
    xscr,
    xsqcup,
    xuplus,
    xutri,
    xvee,
    xwedge,
    yacute,
    yacy,
    ycirc,
    ycy,
    yen,
    yfr,
    yicy,
    yopf,
    yscr,
    yucy,
    yuml,
    zacute,
    zcaron,
    zcy,
    zdot,
    zeetrf,
    zeta,
    zfr,
    zhcy,
    zigrarr,
    zopf,
    zscr,
    zwj,
    zwnj
  },
  require$$0 = getAugmentedNamespace(entities$2);
var entities = require$$0,
  regex$4 =
    /[!-#%-\*,-\/:;\?@\[-\]_\{\}\xA1\xA7\xAB\xB6\xB7\xBB\xBF\u037E\u0387\u055A-\u055F\u0589\u058A\u05BE\u05C0\u05C3\u05C6\u05F3\u05F4\u0609\u060A\u060C\u060D\u061B\u061E\u061F\u066A-\u066D\u06D4\u0700-\u070D\u07F7-\u07F9\u0830-\u083E\u085E\u0964\u0965\u0970\u09FD\u0A76\u0AF0\u0C84\u0DF4\u0E4F\u0E5A\u0E5B\u0F04-\u0F12\u0F14\u0F3A-\u0F3D\u0F85\u0FD0-\u0FD4\u0FD9\u0FDA\u104A-\u104F\u10FB\u1360-\u1368\u1400\u166D\u166E\u169B\u169C\u16EB-\u16ED\u1735\u1736\u17D4-\u17D6\u17D8-\u17DA\u1800-\u180A\u1944\u1945\u1A1E\u1A1F\u1AA0-\u1AA6\u1AA8-\u1AAD\u1B5A-\u1B60\u1BFC-\u1BFF\u1C3B-\u1C3F\u1C7E\u1C7F\u1CC0-\u1CC7\u1CD3\u2010-\u2027\u2030-\u2043\u2045-\u2051\u2053-\u205E\u207D\u207E\u208D\u208E\u2308-\u230B\u2329\u232A\u2768-\u2775\u27C5\u27C6\u27E6-\u27EF\u2983-\u2998\u29D8-\u29DB\u29FC\u29FD\u2CF9-\u2CFC\u2CFE\u2CFF\u2D70\u2E00-\u2E2E\u2E30-\u2E4E\u3001-\u3003\u3008-\u3011\u3014-\u301F\u3030\u303D\u30A0\u30FB\uA4FE\uA4FF\uA60D-\uA60F\uA673\uA67E\uA6F2-\uA6F7\uA874-\uA877\uA8CE\uA8CF\uA8F8-\uA8FA\uA8FC\uA92E\uA92F\uA95F\uA9C1-\uA9CD\uA9DE\uA9DF\uAA5C-\uAA5F\uAADE\uAADF\uAAF0\uAAF1\uABEB\uFD3E\uFD3F\uFE10-\uFE19\uFE30-\uFE52\uFE54-\uFE61\uFE63\uFE68\uFE6A\uFE6B\uFF01-\uFF03\uFF05-\uFF0A\uFF0C-\uFF0F\uFF1A\uFF1B\uFF1F\uFF20\uFF3B-\uFF3D\uFF3F\uFF5B\uFF5D\uFF5F-\uFF65]|\uD800[\uDD00-\uDD02\uDF9F\uDFD0]|\uD801\uDD6F|\uD802[\uDC57\uDD1F\uDD3F\uDE50-\uDE58\uDE7F\uDEF0-\uDEF6\uDF39-\uDF3F\uDF99-\uDF9C]|\uD803[\uDF55-\uDF59]|\uD804[\uDC47-\uDC4D\uDCBB\uDCBC\uDCBE-\uDCC1\uDD40-\uDD43\uDD74\uDD75\uDDC5-\uDDC8\uDDCD\uDDDB\uDDDD-\uDDDF\uDE38-\uDE3D\uDEA9]|\uD805[\uDC4B-\uDC4F\uDC5B\uDC5D\uDCC6\uDDC1-\uDDD7\uDE41-\uDE43\uDE60-\uDE6C\uDF3C-\uDF3E]|\uD806[\uDC3B\uDE3F-\uDE46\uDE9A-\uDE9C\uDE9E-\uDEA2]|\uD807[\uDC41-\uDC45\uDC70\uDC71\uDEF7\uDEF8]|\uD809[\uDC70-\uDC74]|\uD81A[\uDE6E\uDE6F\uDEF5\uDF37-\uDF3B\uDF44]|\uD81B[\uDE97-\uDE9A]|\uD82F\uDC9F|\uD836[\uDE87-\uDE8B]|\uD83A[\uDD5E\uDD5F]/,
  mdurl = {},
  encode_1,
  hasRequiredEncode;
function requireEncode() {
  if (hasRequiredEncode) return encode_1;
  hasRequiredEncode = 1;
  var i = {};
  function q(a) {
    var s,
      n,
      o = i[a];
    if (o) return o;
    for (o = i[a] = [], s = 0; s < 128; s++)
      (n = String.fromCharCode(s)),
        /^[0-9a-z]$/i.test(n)
          ? o.push(n)
          : o.push('%' + ('0' + s.toString(16).toUpperCase()).slice(-2));
    for (s = 0; s < a.length; s++) o[a.charCodeAt(s)] = a[s];
    return o;
  }
  function p(a, s, n) {
    var o,
      u,
      m,
      y,
      e,
      S = '';
    for (
      typeof s != 'string' && ((n = s), (s = p.defaultChars)),
        typeof n > 'u' && (n = !0),
        e = q(s),
        o = 0,
        u = a.length;
      o < u;
      o++
    ) {
      if (
        ((m = a.charCodeAt(o)),
        n &&
          m === 37 &&
          o + 2 < u &&
          /^[0-9a-f]{2}$/i.test(a.slice(o + 1, o + 3)))
      ) {
        (S += a.slice(o, o + 3)), (o += 2);
        continue;
      }
      if (m < 128) {
        S += e[m];
        continue;
      }
      if (m >= 55296 && m <= 57343) {
        if (
          m >= 55296 &&
          m <= 56319 &&
          o + 1 < u &&
          ((y = a.charCodeAt(o + 1)), y >= 56320 && y <= 57343)
        ) {
          (S += encodeURIComponent(a[o] + a[o + 1])), o++;
          continue;
        }
        S += '%EF%BF%BD';
        continue;
      }
      S += encodeURIComponent(a[o]);
    }
    return S;
  }
  return (
    (p.defaultChars = ";/?:@&=+$,-_.!~*'()#"),
    (p.componentChars = "-_.!~*'()"),
    (encode_1 = p),
    encode_1
  );
}
var decode_1, hasRequiredDecode;
function requireDecode() {
  if (hasRequiredDecode) return decode_1;
  hasRequiredDecode = 1;
  var i = {};
  function q(a) {
    var s,
      n,
      o = i[a];
    if (o) return o;
    for (o = i[a] = [], s = 0; s < 128; s++)
      (n = String.fromCharCode(s)), o.push(n);
    for (s = 0; s < a.length; s++)
      (n = a.charCodeAt(s)),
        (o[n] = '%' + ('0' + n.toString(16).toUpperCase()).slice(-2));
    return o;
  }
  function p(a, s) {
    var n;
    return (
      typeof s != 'string' && (s = p.defaultChars),
      (n = q(s)),
      a.replace(/(%[a-f0-9]{2})+/gi, function (o) {
        var u,
          m,
          y,
          e,
          S,
          O,
          x,
          C = '';
        for (u = 0, m = o.length; u < m; u += 3) {
          if (((y = parseInt(o.slice(u + 1, u + 3), 16)), y < 128)) {
            C += n[y];
            continue;
          }
          if (
            (y & 224) === 192 &&
            u + 3 < m &&
            ((e = parseInt(o.slice(u + 4, u + 6), 16)), (e & 192) === 128)
          ) {
            (x = ((y << 6) & 1984) | (e & 63)),
              x < 128 ? (C += '\uFFFD\uFFFD') : (C += String.fromCharCode(x)),
              (u += 3);
            continue;
          }
          if (
            (y & 240) === 224 &&
            u + 6 < m &&
            ((e = parseInt(o.slice(u + 4, u + 6), 16)),
            (S = parseInt(o.slice(u + 7, u + 9), 16)),
            (e & 192) === 128 && (S & 192) === 128)
          ) {
            (x = ((y << 12) & 61440) | ((e << 6) & 4032) | (S & 63)),
              x < 2048 || (x >= 55296 && x <= 57343)
                ? (C += '\uFFFD\uFFFD\uFFFD')
                : (C += String.fromCharCode(x)),
              (u += 6);
            continue;
          }
          if (
            (y & 248) === 240 &&
            u + 9 < m &&
            ((e = parseInt(o.slice(u + 4, u + 6), 16)),
            (S = parseInt(o.slice(u + 7, u + 9), 16)),
            (O = parseInt(o.slice(u + 10, u + 12), 16)),
            (e & 192) === 128 && (S & 192) === 128 && (O & 192) === 128)
          ) {
            (x =
              ((y << 18) & 1835008) |
              ((e << 12) & 258048) |
              ((S << 6) & 4032) |
              (O & 63)),
              x < 65536 || x > 1114111
                ? (C += '\uFFFD\uFFFD\uFFFD\uFFFD')
                : ((x -= 65536),
                  (C += String.fromCharCode(
                    55296 + (x >> 10),
                    56320 + (x & 1023)
                  ))),
              (u += 9);
            continue;
          }
          C += '\uFFFD';
        }
        return C;
      })
    );
  }
  return (
    (p.defaultChars = ';/?:@&=+$,#'),
    (p.componentChars = ''),
    (decode_1 = p),
    decode_1
  );
}
var format, hasRequiredFormat;
function requireFormat() {
  return (
    hasRequiredFormat ||
      ((hasRequiredFormat = 1),
      (format = function (q) {
        var p = '';
        return (
          (p += q.protocol || ''),
          (p += q.slashes ? '//' : ''),
          (p += q.auth ? q.auth + '@' : ''),
          q.hostname && q.hostname.indexOf(':') !== -1
            ? (p += '[' + q.hostname + ']')
            : (p += q.hostname || ''),
          (p += q.port ? ':' + q.port : ''),
          (p += q.pathname || ''),
          (p += q.search || ''),
          (p += q.hash || ''),
          p
        );
      })),
    format
  );
}
var parse, hasRequiredParse;
function requireParse() {
  if (hasRequiredParse) return parse;
  hasRequiredParse = 1;
  function i() {
    (this.protocol = null),
      (this.slashes = null),
      (this.auth = null),
      (this.port = null),
      (this.hostname = null),
      (this.hash = null),
      (this.search = null),
      (this.pathname = null);
  }
  var q = /^([a-z0-9.+-]+:)/i,
    p = /:[0-9]*$/,
    a = /^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,
    s = [
      '<',
      '>',
      '"',
      '`',
      ' ',
      '\r',
      `
`,
      '	'
    ],
    n = ['{', '}', '|', '\\', '^', '`'].concat(s),
    o = ["'"].concat(n),
    u = ['%', '/', '?', ';', '#'].concat(o),
    m = ['/', '?', '#'],
    y = 255,
    e = /^[+a-z0-9A-Z_-]{0,63}$/,
    S = /^([+a-z0-9A-Z_-]{0,63})(.*)$/,
    O = { javascript: !0, 'javascript:': !0 },
    x = {
      http: !0,
      https: !0,
      ftp: !0,
      gopher: !0,
      file: !0,
      'http:': !0,
      'https:': !0,
      'ftp:': !0,
      'gopher:': !0,
      'file:': !0
    };
  function C(v, g) {
    if (v && v instanceof i) return v;
    var h = new i();
    return h.parse(v, g), h;
  }
  return (
    (i.prototype.parse = function (v, g) {
      var h,
        T,
        z,
        c,
        l,
        r = v;
      if (((r = r.trim()), !g && v.split('#').length === 1)) {
        var d = a.exec(r);
        if (d)
          return (this.pathname = d[1]), d[2] && (this.search = d[2]), this;
      }
      var w = q.exec(r);
      if (
        (w &&
          ((w = w[0]),
          (z = w.toLowerCase()),
          (this.protocol = w),
          (r = r.substr(w.length))),
        (g || w || r.match(/^\/\/[^@\/]+@[^@\/]+/)) &&
          ((l = r.substr(0, 2) === '//'),
          l && !(w && O[w]) && ((r = r.substr(2)), (this.slashes = !0))),
        !O[w] && (l || (w && !x[w])))
      ) {
        var E = -1;
        for (h = 0; h < m.length; h++)
          (c = r.indexOf(m[h])), c !== -1 && (E === -1 || c < E) && (E = c);
        var R, N;
        for (
          E === -1 ? (N = r.lastIndexOf('@')) : (N = r.lastIndexOf('@', E)),
            N !== -1 &&
              ((R = r.slice(0, N)), (r = r.slice(N + 1)), (this.auth = R)),
            E = -1,
            h = 0;
          h < u.length;
          h++
        )
          (c = r.indexOf(u[h])), c !== -1 && (E === -1 || c < E) && (E = c);
        E === -1 && (E = r.length), r[E - 1] === ':' && E--;
        var V = r.slice(0, E);
        (r = r.slice(E)),
          this.parseHost(V),
          (this.hostname = this.hostname || '');
        var I =
          this.hostname[0] === '[' &&
          this.hostname[this.hostname.length - 1] === ']';
        if (!I) {
          var t = this.hostname.split(/\./);
          for (h = 0, T = t.length; h < T; h++) {
            var f = t[h];
            if (f && !f.match(e)) {
              for (var D = '', L = 0, P = f.length; L < P; L++)
                f.charCodeAt(L) > 127 ? (D += 'x') : (D += f[L]);
              if (!D.match(e)) {
                var B = t.slice(0, h),
                  A = t.slice(h + 1),
                  k = f.match(S);
                k && (B.push(k[1]), A.unshift(k[2])),
                  A.length && (r = A.join('.') + r),
                  (this.hostname = B.join('.'));
                break;
              }
            }
          }
        }
        this.hostname.length > y && (this.hostname = ''),
          I &&
            (this.hostname = this.hostname.substr(1, this.hostname.length - 2));
      }
      var F = r.indexOf('#');
      F !== -1 && ((this.hash = r.substr(F)), (r = r.slice(0, F)));
      var $ = r.indexOf('?');
      return (
        $ !== -1 && ((this.search = r.substr($)), (r = r.slice(0, $))),
        r && (this.pathname = r),
        x[z] && this.hostname && !this.pathname && (this.pathname = ''),
        this
      );
    }),
    (i.prototype.parseHost = function (v) {
      var g = p.exec(v);
      g &&
        ((g = g[0]),
        g !== ':' && (this.port = g.substr(1)),
        (v = v.substr(0, v.length - g.length))),
        v && (this.hostname = v);
    }),
    (parse = C),
    parse
  );
}
var hasRequiredMdurl;
function requireMdurl() {
  return (
    hasRequiredMdurl ||
      ((hasRequiredMdurl = 1),
      (mdurl.encode = requireEncode()),
      (mdurl.decode = requireDecode()),
      (mdurl.format = requireFormat()),
      (mdurl.parse = requireParse())),
    mdurl
  );
}
var uc_micro = {},
  regex$3,
  hasRequiredRegex$3;
function requireRegex$3() {
  return (
    hasRequiredRegex$3 ||
      ((hasRequiredRegex$3 = 1),
      (regex$3 =
        /[\0-\uD7FF\uE000-\uFFFF]|[\uD800-\uDBFF][\uDC00-\uDFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/)),
    regex$3
  );
}
var regex$2, hasRequiredRegex$2;
function requireRegex$2() {
  return (
    hasRequiredRegex$2 ||
      ((hasRequiredRegex$2 = 1), (regex$2 = /[\0-\x1F\x7F-\x9F]/)),
    regex$2
  );
}
var regex$1, hasRequiredRegex$1;
function requireRegex$1() {
  return (
    hasRequiredRegex$1 ||
      ((hasRequiredRegex$1 = 1),
      (regex$1 =
        /[\xAD\u0600-\u0605\u061C\u06DD\u070F\u08E2\u180E\u200B-\u200F\u202A-\u202E\u2060-\u2064\u2066-\u206F\uFEFF\uFFF9-\uFFFB]|\uD804[\uDCBD\uDCCD]|\uD82F[\uDCA0-\uDCA3]|\uD834[\uDD73-\uDD7A]|\uDB40[\uDC01\uDC20-\uDC7F]/)),
    regex$1
  );
}
var regex, hasRequiredRegex;
function requireRegex() {
  return (
    hasRequiredRegex ||
      ((hasRequiredRegex = 1),
      (regex = /[ \xA0\u1680\u2000-\u200A\u2028\u2029\u202F\u205F\u3000]/)),
    regex
  );
}
var hasRequiredUc_micro;
function requireUc_micro() {
  return (
    hasRequiredUc_micro ||
      ((hasRequiredUc_micro = 1),
      (uc_micro.Any = requireRegex$3()),
      (uc_micro.Cc = requireRegex$2()),
      (uc_micro.Cf = requireRegex$1()),
      (uc_micro.P = regex$4),
      (uc_micro.Z = requireRegex())),
    uc_micro
  );
}
(function (i) {
  function q(t) {
    return Object.prototype.toString.call(t);
  }
  function p(t) {
    return q(t) === '[object String]';
  }
  var a = Object.prototype.hasOwnProperty;
  function s(t, f) {
    return a.call(t, f);
  }
  function n(t) {
    var f = Array.prototype.slice.call(arguments, 1);
    return (
      f.forEach(function (D) {
        if (D) {
          if (typeof D != 'object') throw new TypeError(D + 'must be object');
          Object.keys(D).forEach(function (L) {
            t[L] = D[L];
          });
        }
      }),
      t
    );
  }
  function o(t, f, D) {
    return [].concat(t.slice(0, f), D, t.slice(f + 1));
  }
  function u(t) {
    return !(
      (t >= 55296 && t <= 57343) ||
      (t >= 64976 && t <= 65007) ||
      (t & 65535) === 65535 ||
      (t & 65535) === 65534 ||
      (t >= 0 && t <= 8) ||
      t === 11 ||
      (t >= 14 && t <= 31) ||
      (t >= 127 && t <= 159) ||
      t > 1114111
    );
  }
  function m(t) {
    if (t > 65535) {
      t -= 65536;
      var f = 55296 + (t >> 10),
        D = 56320 + (t & 1023);
      return String.fromCharCode(f, D);
    }
    return String.fromCharCode(t);
  }
  var y = /\\([!"#$%&'()*+,\-.\/:;<=>?@[\\\]^_`{|}~])/g,
    e = /&([a-z#][a-z0-9]{1,31});/gi,
    S = new RegExp(y.source + '|' + e.source, 'gi'),
    O = /^#((?:x[a-f0-9]{1,8}|[0-9]{1,8}))/i,
    x = entities;
  function C(t, f) {
    var D = 0;
    return s(x, f)
      ? x[f]
      : f.charCodeAt(0) === 35 &&
          O.test(f) &&
          ((D =
            f[1].toLowerCase() === 'x'
              ? parseInt(f.slice(2), 16)
              : parseInt(f.slice(1), 10)),
          u(D))
        ? m(D)
        : t;
  }
  function v(t) {
    return t.indexOf('\\') < 0 ? t : t.replace(y, '$1');
  }
  function g(t) {
    return t.indexOf('\\') < 0 && t.indexOf('&') < 0
      ? t
      : t.replace(S, function (f, D, L) {
          return D || C(f, L);
        });
  }
  var h = /[&<>"]/,
    T = /[&<>"]/g,
    z = { '&': '&amp;', '<': '&lt;', '>': '&gt;', '"': '&quot;' };
  function c(t) {
    return z[t];
  }
  function l(t) {
    return h.test(t) ? t.replace(T, c) : t;
  }
  var r = /[.?*+^$[\]\\(){}|-]/g;
  function d(t) {
    return t.replace(r, '\\$&');
  }
  function w(t) {
    switch (t) {
      case 9:
      case 32:
        return !0;
    }
    return !1;
  }
  function E(t) {
    if (t >= 8192 && t <= 8202) return !0;
    switch (t) {
      case 9:
      case 10:
      case 11:
      case 12:
      case 13:
      case 32:
      case 160:
      case 5760:
      case 8239:
      case 8287:
      case 12288:
        return !0;
    }
    return !1;
  }
  var R = regex$4;
  function N(t) {
    return R.test(t);
  }
  function V(t) {
    switch (t) {
      case 33:
      case 34:
      case 35:
      case 36:
      case 37:
      case 38:
      case 39:
      case 40:
      case 41:
      case 42:
      case 43:
      case 44:
      case 45:
      case 46:
      case 47:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 123:
      case 124:
      case 125:
      case 126:
        return !0;
      default:
        return !1;
    }
  }
  function I(t) {
    return t.trim().replace(/\s+/g, ' ').toUpperCase();
  }
  (i.lib = {}),
    (i.lib.mdurl = requireMdurl()),
    (i.lib.ucmicro = requireUc_micro()),
    (i.assign = n),
    (i.isString = p),
    (i.has = s),
    (i.unescapeMd = v),
    (i.unescapeAll = g),
    (i.isValidEntityCode = u),
    (i.fromCodePoint = m),
    (i.escapeHtml = l),
    (i.arrayReplaceAt = o),
    (i.isSpace = w),
    (i.isWhiteSpace = E),
    (i.isMdAsciiPunct = V),
    (i.isPunctChar = N),
    (i.escapeRE = d),
    (i.normalizeReference = I);
})(utils);
const pangu = pangu_minExports,
  { escapeHtml, isWhiteSpace } = utils;
function getPrevChar(i, q) {
  let p = '';
  for (let a = q - 1; a >= 0; a -= 1) {
    const { content: s, type: n } = i[a];
    if (n === 'html_inline') break;
    if (s && s.length) {
      p = s.slice(-1);
      break;
    }
  }
  return p;
}
var src = (i, q = {}) => {
  const { additionalRules: p = ['code_inline'] } = q;
  (i.renderer.rules.text = (a, s, n, o, u) => {
    const m = getPrevChar(a, s);
    return escapeHtml(pangu.spacing(m + a[s].content).slice(m.length));
  }),
    p.forEach((a) => {
      const s = i.renderer.rules[a];
      s &&
        (i.renderer.rules[a] = (n, o, u, m, y) => {
          let e = s(n, o, u, m, y);
          return (
            e.length &&
              (o > 0 && !isWhiteSpace(e.charAt(0)) && (e = ' ' + e),
              o < n.length - 1 &&
                !isWhiteSpace(e.charAt(e.length - 1)) &&
                (e += ' ')),
            e
          );
        });
    });
};
const index = getDefaultExportFromCjs(src);
module.exports = index;
